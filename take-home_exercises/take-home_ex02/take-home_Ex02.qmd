---
title: "Take-home Exercise 2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "Marcus Jaeson Yeo"
date: "September 26, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---

## 1.0 Introduction

#### Context:

Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people, aged 15â€“64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.

The geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.

In Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.

Figure below shows geographic distribution of drug use cases by province and by year.

#### Objectives:

-   if the key indicators of drug abuse of Thailand are independent from space. (spatial independent, randomly distributed) (spatial weights and applications)

-   If the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots. (no need for emerging hotspots)

-   Last but not least, you are also interested to investigate how the observation above evolve over time. (no need for spatial-temporal)

------------------------------------------------------------------------

## 2.0 Importing Packages

```{r}
pacman::p_load(sf, lubridate, tmap, tidyverse, spdep, sfdep, smoothr, dplyr, tidyr)
```

------------------------------------------------------------------------

## 3.0 Importing Datasets into Environment

-   geospatial (admin1 (province level))

    ```{r}
    thailand_boundary = st_read(dsn="data/geospatial/",
            layer="tha_admbnda_adm1_rtsd_20220121")

    dim(thailand_boundary)
    ```

    ```{r}
    # plot(thailand_boundary, max.plot=16)
    ```

-   aspatial

    ```{r}
    thailand_sf <- read_csv("data/aspatial/thai_drug_offenses_2017_2022.csv")



    dim(thailand_sf)
    ```

------------------------------------------------------------------------

## 4.0 Data Wrangling + necessary Projection Transformation

### 4.1 Dropping redundant columns + Left Join

-   Dropping columns with NA and columns that do not give us valuable information

```{r}
thailand_boundary <- thailand_boundary %>%
  select(1:3, 14:17)

thailand_sf <- thailand_sf %>%
  select(1:3, 5)
```

-   We need to further understand a bit more about the common identifier (province), hence printing the unique provinces, which is both [76]{.underline} unique provinces for both boundary and sf.

```{r}
unique_provinces_boundary <- unique(thailand_boundary$ADM1_EN)
unique_provinces_boundary
```

```{r}
unique_provinces_sf <- unique(thailand_sf$province_en)
unique_provinces_sf
```

-   After studying the columns of both the geospatial and aspatial data, we see that the aspatial data (thailand_sf) lacks geometrical data (such as the latitude and longitude spatial features). We need to join both boundary and working data with its common columns: **ADM1_EN** (thailand_boundary) and **province_en** (thailand_sf).

    -   First, we need to mutate to get the common identifier

```{r}
#| eval: false
thailand_boundary <- thailand_boundary %>%
  mutate(ADM1_EN = str_to_lower(ADM1_EN),  # Convert to lowercase
         ADM1_EN = str_trim(ADM1_EN))

thailand_sf <- thailand_sf %>%
  mutate(province_en = str_to_lower(province_en),  # Convert to lowercase
         province_en = str_trim(province_en))
         
```

-   Second, we perform a left join. After left join, impute the 2 province rows with missing values with the mean values.

```{r}

thailand_left_join <- thailand_boundary %>%
  left_join(thailand_sf, by = c("ADM1_EN" = "province_en")) %>%
  select(3:4, 7:10)
```

```{r}
missing_provinces <- thailand_left_join %>%
  filter(is.na(no_cases)) %>%  # Check for NA in the case column
  select(ADM1_EN)

print(missing_provinces)
```

```{r}
thailand_left_join_filtered <- thailand_left_join %>%
  filter(!is.na(no_cases))  # Exclude rows where no_cases is NA

```

### 4.2 Dropping and summing total number of drug cases

#### Understanding our data

-   unique years, provinces, and types of drug offenses

```{r}
unique_years = unique(thailand_left_join_filtered$fiscal_year)
unique_provinces = unique(thailand_left_join_filtered$ADM1_EN)
unique_types = unique(thailand_left_join_filtered$types_of_drug_offenses)

unique_years
cat('\n')
unique_provinces
cat('\n')
unique_types
```

#### Filtering and Data Wrangling

-   As we are only interested in drug_cases under the types_of_drug_offenses, we need to filter based on that.

-   Lets drop both date and types_of_drug_offenses column, Sum all the no_cases by each year and province and sort them ascending, drop rows where the total_cases are 0.

```{r}
thailand <- thailand_left_join_filtered %>%
  select("ADM1_EN", "fiscal_year", "types_of_drug_offenses", "no_cases", "geometry") %>%
  filter(types_of_drug_offenses == "drug_use_cases") %>%
  filter(no_cases > 0) %>%
  arrange(fiscal_year)

thailand
```

#### Pivoting the fiscal years to get unique Polygons

-   We do this because when we do polygonal rendering, there are 6 copies (years 2017-2022) of the same polygons, which will slow down the time it takes to execute the process such as the poly2nb() spatial weights when we attempt to find the neighbours of regions. Hence, we need to **reshape** the dataframe using pivot_wider() to [reduce the number of rows]{.underline} (450/6 = 75), and make the [geometry polygons unique]{.underline}, while keeping our provinces unique as well. This is done by transposing the fiscal_year and no_cases to more columns by the number of cases in each year (no_cases\_\<year\>).

```{r}
# Pivoting data to widen fiscal_year into separate no_cases columns by year
thailand <- thailand %>%
  group_by(ADM1_EN, geometry) %>%
  pivot_wider(names_from = fiscal_year, 
              values_from = no_cases,
              names_prefix = "no_cases_") %>%
  ungroup()
```

### 4.3 Projection Transformation

Since the EPSG code is 4326, which is the global code. We want to change both the EPSG code of the boundary data and working data to Thailand's global projection system. Acquiring the code from <https://epsg.io/32647>

-   We will transform the it to Thailand's projected coordinate system (UTM Zone 47N) with the EPSG code: 32647

```{r}
#| eval: false
thailand <- thailand %>%
  st_transform(crs=32647)
```

```{r}
#| eval: false
st_crs(thailand)
```

#### 4.3 Plotting the shapefile object to visualise structure

```{r}
#| eval: false
thailand_shp = st_read("data/geospatial/tha_admbnda_adm1_rtsd_20220121.shp")
```

```{r}
#| eval: false
boundary_plot <- tmap_mode("plot")
tm_shape(thailand_shp)+
  tm_fill(col="white")+
  tm_borders(col = "black", lwd=0.3, alpha=0.6)+
  tm_layout(
    main.title = "Provinces",
    main.title.size = 1,
    main.title.position = "center",
    legend.show = FALSE,
     frame = FALSE)
```

```{r}
#| eval: false
# basemap <- tm_shape(thailand) +
#   tm_polygons() +
#   tm_text("ADM1_EN", size=0.5)
# 
# drug_cases <- qtm(thailand, "no_cases")
# tmap_arrange(basemap, drug_cases, asp=1, ncol=2)
```

#### 4.4 Writing and Reading into RDS format

```{r}
#| eval: false

#thailand combined dataframe
write_rds(thailand, "data/rds/thailand.rds")

#plot
# write_rds(boundary_plot, "data/rds/boundary_plot.rds")
# write_rds(basemap, "data/rds/basemap.rds")
# write_rds(drug_cases, "data/rds/drug_cases.rds")
```

```{r}

thailand <- read_rds("data/rds/thailand.rds")
```

------------------------------------------------------------------------

## 5.0 Exploratory Spatial Data Analysis

-   min and max total no of drug cases

```{r}
min_cases = min(thailand$no_cases, na.rm = FALSE)
max_cases = max(thailand$no_cases, na.rm = FALSE)

min_cases
cat("\n")
max_cases
```

### 5.1 Plotting

### 5.1.1 Total number of cases by each year and each province

```{r}

min_cases <- min(thailand$no_cases_2017, thailand$no_cases_2018, na.rm = TRUE)
max_cases <- max(thailand$no_cases_2017, thailand$no_cases_2018, na.rm = TRUE)

# Define custom breaks based on the range
custom_breaks <- seq(min_cases, max_cases, length.out = 5)

plot_2017 <- tm_shape(thailand) +
  tm_polygons("no_cases_2017",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2017)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Drug Use Cases in Thailand (2017)",  # Main title for the plot
            title.size = 1.5,
            legend.outside = TRUE,  # Legend outside the map area
            asp = 0.8,              # Control aspect ratio
            frame = TRUE)          # Remove the frame around the plot

plot_2018 <- tm_shape(thailand) +
  tm_polygons("no_cases_2018",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2018)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Drug Use Cases in Thailand (2017)",  # Main title for the plot
            title.size = 1.5,
            legend.outside = TRUE,  # Legend outside the map area
            asp = 0.8,              # Control aspect ratio
            frame = TRUE)          # Remove the frame around the plot

# plot_2017
# plot_2018
tmap_arrange(plot_2017, plot_2018, asp=1, ncol=2)


```

### 5.1.2 Side by side view of province and total no of drug cases in year 2017

```{r}

# provinces <- tm_shape(thailand %>% filter(fiscal_year == 2017)) +
#   tm_polygons() +
#   tm_text("ADM1_EN", size=0.5)
# 
# custom_breaks <- c(0, 5000, 10000, 15000, 20000)  # Customize as necessary
# 
# # total_cases <- qtm(thailand_summary, "total_cases")
# no_cases <- tm_shape(thailand) +
#   tm_polygons("no_cases", 
#               breaks = custom_breaks,  # Apply the custom breaks
#               palette = "Blues",        # Color palette
#               title = "Number of Cases")    # Title for the legend
# tmap_arrange(provinces, no_cases, asp=1, ncol=2)

```

### 5.1.3 Top 5 Provinces with the highest number of drug cases in year 2017

```{r}
# Step 1: Find the top 5 provinces with the highest total cases
# top_5_provinces <- thailand %>%
#   filter(fiscal_year == 2017) %>%
#   arrange(desc(no_cases)) %>%
#   slice_head(n = 5)  # Select the top 5 rows
# 
# # Step 2: Highlight the top 5 provinces
# provinces <- tm_shape(thailand %>% filter(fiscal_year == 2017)) +
#   tm_polygons() +
#   tm_text("ADM1_EN", size = 0.5)
# 
# # Apply custom breaks to the total_cases plot
# no_cases <- tm_shape(thailand %>% filter(fiscal_year == 2017)) +
#   tm_polygons("no_cases", 
#               breaks = custom_breaks,  # Apply the custom breaks
#               palette = "Blues",        # Color palette
#               title = "Total Cases") +
#   tm_borders(alpha = 0.5)
# 
# # Step 3: Highlight the top 5 provinces on the same plot
# highlight_top_5 <- tm_shape(top_5_provinces) +
#   tm_borders(col = "red", lwd = 3) +  # Use red borders to highlight
#   tm_text("ADM1_EN", size = 0.7, col = "red", fontface = "bold")  # Optional: Label them
# 
# # Step 4: Arrange the plots
# tmap_arrange(provinces, no_cases + highlight_top_5, asp = 1, ncol = 2)
```

```{r}
#|eval: false
# plot_2018 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2018)) + 
#   tm_fill("total_cases", n = 5, style = "equal") + tm_borders() + tm_layout(main.title = "2018")
# 
# plot_2019 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2019)) + 
#   tm_fill("total_cases", n = 5, style = "equal") + tm_borders() + tm_layout(main.title = "2019")
# 
# plot_2020 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2020)) + 
#   tm_fill("total_cases", n = 5, style = "equal") + tm_borders() + tm_layout(main.title = "2020")
# 
# plot_2021 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2021)) + 
#   tm_fill("total_cases", n = 5, style = "equal") + tm_borders() + tm_layout(main.title = "2021")
# 
# plot_2022 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2022)) + 
#   tm_fill("total_cases", n = 5, style = "equal") + tm_borders() + tm_layout(main.title = "2022")
# 
# # Arrange them
# tmap_arrange(plot_2017, plot_2018, plot_2019, plot_2020, plot_2021, plot_2022, ncol = 2)
```

### 5.2 Visualising Equal and Quantile in year 2017

```{r}
# equal <- tm_shape(thailand_summary %>% filter(fiscal_year == 2017)) + 
#   tm_polygons("total_cases",
#           palette = "Blues",
#           style="equal", n=10) + 
#   tm_borders(alpha = 0.5) + 
#   tm_layout(main.title = "Equal interval classification (year 2017)", title.size = 2)
# 
# quantile <- tm_shape(thailand_summary %>% filter(fiscal_year == 2017)) +
#   tm_polygons("total_cases",
#           palette = "Blues",
#           style="quantile", n=10) +
#   tm_layout(main.title = "Quantile interval classification (year 2017)", title.size = 2)
# 
# tmap_arrange(equal, 
#              quantile, 
#              asp=1, 
#              ncol=2)
```

```{r}
# write_rds(equal, "data/rds/equal.rds")
# write_rds(quantile, "data/rds/quantile.rds")
```

------------------------------------------------------------------------

## 6.0 Global Measures of Spatial Autocorrelation

-   If we attempt to use contiguity-based spatial weights to find neighbours, and use the queen method, we come up with a region that is not linked to any neighbours, which is incorrect. Hence, we need to swap to using distance-based method to find neighbours.

```{r}

wm_q <- poly2nb(thailand, 
                queen = TRUE)

summary(wm_q)
```

```{r}

write_rds(wm_q, "data/rds/wm_q.rds")
```

```{r}
wm_q <- read_rds("data/rds/wm_q.rds")
summary(wm_q)
```

### 6.1 Configuring and Binding coordinates

#### Computing longitude and latitude to achieve coordinates

-   longitude

```{r}
longitude <- map_dbl(thailand$geometry, ~st_centroid(.x)[[1]])
```

-   latitude

```{r}
latitude <- map_dbl(thailand$geometry, ~st_centroid(.x)[[2]])
```

-   bind the coordinates

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

### 6.2 Computing distance-based neighbours

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = FALSE))
summary(k1dists)

```

::: callout-note
## This summary report shows that the largest first nearest neighbour distance is 110987 meters (UTM). As dnearneigh accepts meters and we need specify longlat = FALSE, lets round it up to 111000 meters and use this as our upper threshold will ensure us that all regions will at least have 1 neighbour.
:::

### 6.2.1 Fixed Distance

-   within 111000 meters radius

```{r}
wm_d111000 <- dnearneigh(coords, 0, 111000, longlat = FALSE)
wm_d111000
```

```{r}
table(thailand$ADM1_EN, card(wm_d111000))
```

```{r}
n_comp <- n.comp.nb(wm_d111000)
n_comp$nc
```

-   This shows that there are 2 different clusters, meaning that some regions are connected to each other, while others are not, leading to two distinct groups. Below shows that the first cluster contains 61 regions, while the second cluster contains 14 regions.

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
x_limits <- c(min(longitude) - 1000, max(longitude) + 1000)  # Adjust these values as needed
y_limits <- c(min(latitude) - 1000, max(latitude) + 1000)   # Adjust these values as needed

# Plot the boundary and neighborhood structures with adjusted limits
plot(thailand$geometry, border="lightgrey", xlim = x_limits, ylim = y_limits)
plot(wm_d111000, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

-   Plot 1st nearest neighbours (red lines) vs Distance link of neighbours within the cut-off distance of 111000 meters (black lines)

```{r}
par(mfrow=c(1,2))
plot(thailand$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(thailand$geometry, border="lightgrey", main="Distance link")
plot(wm_d111000, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 6.2.2 Adaptive Distance

#### Computing Adaptive Distance Weight matrix

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

```{r}
table(thailand$ADM1_EN, card(knn6))
```

#### Plotting adaptive distance weight matrix

```{r}
plot(thailand$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 6.2.3 Global Moran I: Access Spatial Autocorrelation using Adaptive Distance

```{r}
rsknn6 <- nb2listw(knn6, 
                   style="W", 
                   zero.policy = TRUE)
rsknn6
```

```{r}
thailand_total_cases <- thailand %>%
  mutate(total_cases = no_cases_2017 + no_cases_2018 + 
                     no_cases_2019 + no_cases_2020 + 
                     no_cases_2021 + no_cases_2022)
```

#### 1. Moran's I Test

```{r}
moran.test(thailand_total_cases$total_cases, 
           listw=rsknn6, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

#### 2. .Computing Monte Carlo Moran's I

-   set a seed of 1234

-   number of simulations = 1000

```{r}
set.seed(1234)
bperm_moran= moran.mc(thailand_total_cases$total_cases, 
                listw=rsknn6, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm_moran
```

-   moran I statistic: 0.070057 \> 0 show signs of clustering

-   p-value = 0.091 \> 0.05, 95% confident to accept null hypothesis (h0)

#### 3. Visualising Monte Carlo Moran's I

-   Computing some basic statistics

```{r}
#compute mean
mean(bperm_moran$res[1:999])
cat('\n')

#compute variance
var(bperm_moran$res[1:999])
cat('\n')

#summary bperm
summary(bperm_moran$res[1:999])
```

-   plotting histogram using ggplot2

```{r}
data <- data.frame(simulated_morans_i = bperm_moran$res[1:999])

ggplot(data, aes(x = simulated_morans_i)) +
  geom_histogram(binwidth = (max(data$simulated_morans_i) - min(data$simulated_morans_i)) / 20, 
                 color = "black", fill = "pink") +  # Histogram
  geom_vline(xintercept = 0, color = "red", linetype = "solid") +  # Vertical line at x=0
  labs(x = "Simulated Moran's I", y = "Frequency") +  # Labels for x and y axis
  theme_minimal()  # Clean minimal theme

```

### 6.3 Spatial Correlogram

#### Compute Moran's I Spatial Correlogram

In the code chunk below,Â [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html)Â ofÂ **spdep**Â package is used to compute a [**6-lag**]{.underline} spatial correlogram of GDPPC. The global spatial autocorrelation used in Moranâ€™s I. TheÂ **plot()**Â of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(knn6,                            
                          thailand_total_cases$total_cases,
                          order=6,  #lag-value: 6                           
                          method="I",                            
                          style="W",
                          zero.policy = TRUE) 

plot(MI_corr)
```

-   Looking at the first lag, it is positive, showing signs of clustering. This suggests that the the key indicators of drug abuse of Thailand have positive spatial dependence. The following lags after shows negative Moran I, showing signs of regular patterns amongst 2nd order neighbours and below.

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

------------------------------------------------------------------------

## 7.0 Local Measures of Spatial Autocorrelation

------------------------------------------------------------------------

## 9.0 Conclusion

------------------------------------------------------------------------

## References
