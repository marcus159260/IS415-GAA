---
title: "Take-home Exercise 2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "Marcus Jaeson Yeo"
date: "September 26, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---

## 1.0 Introduction

#### Context:

Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people, aged 15â€“64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.

The geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.

In Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.

Figure below shows geographic distribution of drug use cases by province and by year.

#### Objectives:

-   if the key indicators of drug abuse of Thailand are independent from space. (spatial independent, randomly distributed) (spatial weights and applications)

-   If the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots. (no need for emerging hotspots)

-   Last but not least, you are also interested to investigate how the observation above evolve over time. (no need for spatial-temporal)

------------------------------------------------------------------------

## 2.0 Importing Packages

-   sf

-   tmap

-   tidyverse

-   spdep

-   sfdep

-   dplyr

-   tidyr

```{r}
pacman::p_load(sf, tmap, tidyverse, spdep, sfdep, dplyr, tidyr)
```

------------------------------------------------------------------------

## 3.0 Importing Datasets into Environment

-   geospatial (admin1 (province level))

    ```{r}
    thailand_boundary = st_read(dsn="data/geospatial/",
            layer="tha_admbnda_adm1_rtsd_20220121")

    dim(thailand_boundary)
    ```

-   aspatial

    ```{r}
    thailand_sf <- read_csv("data/aspatial/thai_drug_offenses_2017_2022.csv")



    dim(thailand_sf)
    ```

------------------------------------------------------------------------

## 4.0 Data Wrangling + necessary Projection Transformation

### 4.1 Dropping redundant columns + Left Join

-   We want to check for missing values, and spelling errors within the provinces. So we print out the unique provinces in the thailand_boundary and thailand_sf.

```{r}
print(unique(thailand_boundary$ADM1_EN))
cat('\n---------------------\n')
print(unique(thailand_sf$province_en))
```

Here we notice that in thailand_sf, we have the provinces: 'Lop Buri' and 'Bueng Kan' spelled wrongly, as ''Loburi' and 'buogkan'. Hence, we need to perform data transformation (renaming of the provinces) and do necessary trimming and conversion to lowercase. After which, we will perform a left join using the common identifier (province) and remove the missing values.

-   First, we need to mutate to do the necessary data transformation

```{r}

thailand_boundary <- thailand_boundary %>%
  mutate(ADM1_EN = str_to_lower(ADM1_EN),  # Convert to lowercase
         ADM1_EN = str_trim(ADM1_EN))

thailand_sf <- thailand_sf %>%
  mutate(province_en = str_to_lower(province_en),  # Convert to lowercase
         province_en = str_trim(province_en),
         province_en = gsub("^loburi$", "lop buri", province_en),  # Rename 'loburi' to 'lop buri'
         province_en = gsub("^buogkan$", "bueng kan", province_en)) 
```

```{r}
print(unique(thailand_sf$province_en))
```

By printing the unique thailand_sf provinces again, we get the correct names of the 2 provinces.

-   Second, we perform a left join.

```{r}

thailand_left_join <- thailand_boundary %>%
  left_join(thailand_sf, by = c("ADM1_EN" = "province_en")) %>%
  select(3, 17:19, 21)
  
```

```{r}
missing_provinces <- thailand_left_join %>%
  filter(is.na(no_cases)) %>%  # Check for NA in the case column
  select(ADM1_EN)

print(missing_provinces)
```

We see that there are no rows with missing values.

### 4.2 Dropping and summing total number of drug cases

#### Understanding our data

-   unique years, types of drug offenses

```{r}
unique_years = unique(thailand_left_join$fiscal_year)
unique_types = unique(thailand_left_join$types_of_drug_offenses)

unique_years
cat('\n')
unique_types
```

#### Filtering and Data Wrangling

-   As we are only interested in drug_cases under the types_of_drug_offenses, we need to filter based on that. We need to also filter the rows where the total_cases are 0 and sort the years in ascending (2017-2022).

```{r}
thailand <- thailand_left_join %>%
  filter(types_of_drug_offenses == "drug_use_cases") %>%
  filter(no_cases > 0) %>%
  arrange(fiscal_year)

thailand
```

#### Pivoting the fiscal years to get unique Polygons

-   We do this because when we do polygonal rendering, there are 6 copies (years 2017-2022) of the same polygons, which will slow down the time it takes to execute the process such as the poly2nb() spatial weights when we attempt to find the neighbours of regions. Hence, we need to **reshape** the dataframe using pivot_wider() to [reduce the number of rows]{.underline}, approximately (462/6 = 77 rows), and make the [geometry polygons unique]{.underline}, while keeping our provinces unique as well. This is done by transposing the fiscal_year and no_cases to more columns by the number of cases in each year (no_cases\_\<year\>).

```{r}
# Pivoting data to widen fiscal_year into separate no_cases columns by year
thailand <- thailand %>%
  group_by(ADM1_EN, geometry) %>%
  pivot_wider(names_from = fiscal_year, 
              values_from = no_cases,
              names_prefix = "no_cases_") %>%
  ungroup()
```

```{r}
thailand <- thailand %>%
  mutate(total_cases = no_cases_2017 + no_cases_2018 + 
                     no_cases_2019 + no_cases_2020 + 
                     no_cases_2021 + no_cases_2022)
```

### 4.3 Projection Transformation

Since the EPSG code is 4326, which is the global code. We want to change both the EPSG code of the boundary data and working data to Thailand's global projection system. Acquiring the code from <https://epsg.io/32647>

-   We will transform the it to Thailand's projected coordinate system (UTM Zone 47N) with the EPSG code: 32647

```{r}
#| eval: false
thailand <- thailand %>%
  st_transform(crs=32647)
```

```{r}
#| eval: false
st_crs(thailand)
```

#### 4.3 Plotting the basemap object to visualise structure with provinces

```{r}
#|fig-width: 12
#|fig-height: 10
#|
basemap <- tm_shape(thailand) +
  tm_borders(alpha = 0.5) +
  tm_text("ADM1_EN", size=0.4) + 
  tm_layout(
    main.title = "Basemap with provinces",
    main.title.size = 1,
    main.title.position = "center",
    legend.show = FALSE,
     frame = FALSE)

basemap
```

#### 4.4 Writing and Reading into RDS format

```{r}
#| eval: false

#thailand combined dataframe
write_rds(thailand, "data/rds/thailand.rds")
```

```{r}

thailand <- read_rds("data/rds/thailand.rds")
```

------------------------------------------------------------------------

## 5.0 Exploratory Spatial Data Analysis

-   min and max total no of drug cases

```{r}
min_cases = min(thailand$total_cases, na.rm = FALSE)
max_cases = max(thailand$total_cases, na.rm = FALSE)

min_cases
cat("\n")
max_cases
```

### 5.1 Plotting

### 5.1.1 Total number of cases by each year and each province

```{r}
#| fig-width: 12 
#| fig-height: 10  

min_cases <- min(thailand$no_cases_2017, thailand$no_cases_2018, thailand$no_cases_2019, 
                 thailand$no_cases_2020, thailand$no_cases_2021, thailand$no_cases_2022, na.rm = TRUE)

max_cases <- max(thailand$no_cases_2017, thailand$no_cases_2018, thailand$no_cases_2019, 
                 thailand$no_cases_2020, thailand$no_cases_2021, thailand$no_cases_2022, na.rm = TRUE)

# Define custom breaks based on the range
custom_breaks <- seq(min_cases, max_cases, length.out = 5)

# Plot for 2017
plot_2017 <- tm_shape(thailand) +
  tm_polygons("no_cases_2017",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2017)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "2017",  
            title.size = 0.8,     # Smaller title size
            legend.outside = TRUE,  # Legend outside the map area
            asp = 0.8,              
            frame = TRUE,
            legend.show = TRUE)  # Show legend for only this plot

# Plot for 2018
plot_2018 <- tm_shape(thailand) +
  tm_polygons("no_cases_2018",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2018)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "2018",  
            title.size = 0.8,    
            asp = 0.8,              
            frame = TRUE,
            legend.show = FALSE)  # Hide legend

# Plot for 2019
plot_2019 <- tm_shape(thailand) +
  tm_polygons("no_cases_2019",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2019)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "2019",  
            title.size = 0.8,     
            asp = 0.8,              
            frame = TRUE,
            legend.show = FALSE)  # Hide legend

# Plot for 2020
plot_2020 <- tm_shape(thailand) +
  tm_polygons("no_cases_2020",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2020)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "2020",  
            title.size = 0.8,     
            asp = 0.8,              
            frame = TRUE,
            legend.show = FALSE)  # Hide legend

# Plot for 2021
plot_2021 <- tm_shape(thailand) +
  tm_polygons("no_cases_2021",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2021)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "2021",  
            title.size = 0.8,     
            asp = 0.8,              
            frame = TRUE,
            legend.show = FALSE)  # Hide legend

# Plot for 2022
plot_2022 <- tm_shape(thailand) +
  tm_polygons("no_cases_2022",
          palette = "Blues",
          breaks = custom_breaks, 
          title = "Drug Cases (2022)") +
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "2022",  
            title.size = 0.8,     
            asp = 0.8,              
            frame = TRUE,
            legend.show = FALSE)  # Hide legend

# Arrange all plots side by side in a grid with one legend
tmap_arrange(plot_2017, plot_2018, plot_2019, plot_2020, plot_2021, plot_2022, asp = 1, ncol = 6)


```

### 5.1.2 Top 5 Provinces with the highest number of drug cases over all the years

```{r}
# Step 1: Find the top 5 provinces with the highest total cases
top_5_provinces <- thailand %>%
  arrange(desc(total_cases)) %>%
  slice_head(n = 5)  # Select the top 5 rows

# Step 2: Highlight the top 5 provinces
provinces <- tm_shape(thailand) +
  tm_polygons() +
  tm_text("ADM1_EN", size = 0.5)

# Apply custom breaks to the total_cases plot
total_cases <- tm_shape(thailand) +
  tm_polygons("total_cases",
              breaks = custom_breaks,  # Apply the custom breaks
              palette = "Blues",        # Color palette
              title = "Total Cases") +
  tm_borders(alpha = 0.5)

# Step 3: Highlight the top 5 provinces on the same plot
highlight_top_5 <- tm_shape(top_5_provinces) +
  tm_borders(col = "red", lwd = 3) +  # Use red borders to highlight
  tm_text("ADM1_EN", size = 0.7, col = "black")  # Optional: Label them

# Step 4: Arrange the plots
tmap_arrange(provinces, total_cases + highlight_top_5, asp = 1, ncol = 2)
```

### 5.1.3 Visualising Quantile Interval Classification over all the years

```{r}
#|fig-width: 15
#|fig-height: 12

quantile <- tm_shape(thailand) +
  tm_polygons("total_cases",
          palette = "Blues",
          style="quantile", 
          n=10) +
  tm_layout(main.title = "Quantile interval classification", 
            main.title.size = 1, 
            main.title.position = "Center",
            frame = FALSE,
            legend.title.size = 0.8,  # Reduce the title size
            legend.text.size = 0.5,   # Reduce the text size
            legend.width = 0.3,
            legend.position = c("right", "bottom"))



quantile


```

------------------------------------------------------------------------

## 6.0 Global Measures of Spatial Autocorrelation

-   If we attempt to use contiguity-based spatial weights to find neighbours, and use the queen method, we come up with a region that is not linked to any neighbours, which is incorrect.

```{r}

wm_q <- poly2nb(thailand, 
                queen = TRUE)

summary(wm_q)

```

Lets print out the region with the 0 link. It turns out to be "Phuket".

```{r}
thailand$ADM1_EN[65]
```

Hence, instead of using contiguity-based methods to find neighbours, we need to swap to using distance-based methods instead to find neighbours and do our global spatial autocorrelation.

### 6.1 Configuring and Binding coordinates

#### Computing longitude and latitude to achieve coordinates

-   longitude

```{r}
longitude <- map_dbl(thailand$geometry, ~st_centroid(.x)[[1]])
```

-   latitude

```{r}
latitude <- map_dbl(thailand$geometry, ~st_centroid(.x)[[2]])
```

-   bind the coordinates

```{r}
coords <- cbind(longitude, latitude)
```

```{r}
head(coords)
```

### 6.2 Computing distance-based neighbours

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = FALSE))
summary(k1dists)

```

::: callout-note
## This summary report shows that the largest first nearest neighbour distance is 110987 meters (UTM). As dnearneigh accepts meters and we need specify longlat = FALSE, lets round it up to 111000 meters and use this as our upper threshold will ensure us that all regions will at least have 1 neighbour.
:::

### 6.2.1 Attempting Fixed Distance

-   within 111000 meters radius

```{r}
wm_d111000 <- dnearneigh(coords, 0, 111000, longlat = FALSE)
wm_d111000
```

```{r}
table(thailand$ADM1_EN, card(wm_d111000))
```

```{r}
n_comp <- n.comp.nb(wm_d111000)
n_comp$nc
```

-   This shows that there are 2 disjoined subgraphs, meaning that there are two distinct groups that are not connected each other. Below shows that the first subgraph contains 61 regions, while the second subgraph contains 14 regions.

```{r}
table(n_comp$comp.id)
```

#### Plotting fixed distance weight matrix

```{r}
#| fig-width: 12
#| fig-height: 10

# Plot the boundary and neighborhood structures with adjusted limits
plot(thailand$geometry, border="lightgrey")
plot(wm_d111000, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

-   Plot 1st nearest neighbours (red lines) vs Distance link of neighbours within the cut-off distance of 111000 meters (black lines)

```{r}
#| fig-width: 12
#| fig-height: 10

par(mfrow=c(1,2))
plot(thailand$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(thailand$geometry, border="lightgrey", main="Distance link")
plot(wm_d111000, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 6.2.2 Attempting Adaptive Distance

#### Computing Adaptive Distance Weight matrix

-   Lets fix k=6, and no go too far ahead as greater the k, the further the search of neighbours would be.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

```{r}
str(knn6)
```

```{r}
table(thailand$ADM1_EN, card(knn6))
```

#### Plotting adaptive distance weight matrix

```{r}
#| fig-width: 12
#| fig-height: 10

plot(thailand$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

[**Decision:**]{.underline}

We find that due to the result of 2 disjointed subgraphs in fixed distance, fixed distance method is not very good because the regions should have at least a link to each other, not separation or disjoint. From the adaptive distance plot, we can see that there is no disjoint in the neighbour links, deeming adaptive distance the more suitable method to use. We shall use adaptive distance for the rest, even for local spatial autocorrelation.

### 6.2.3 Global Moran I: Access Spatial Autocorrelation using Adaptive Distance

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

We should also fix our style="w".

```{r}
rsknn6 <- nb2listw(knn6, 
                   style="W", 
                   zero.policy = TRUE)
rsknn6
```

#### 1. Global Moran's I Test

```{r}
moran.test(thailand$total_cases, 
           listw=rsknn6, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

#### 2. .Computing Monte Carlo Moran's I

-   set a seed of 1234

-   number of simulations = 1000

```{r}
set.seed(1234)
bperm_moran= moran.mc(thailand$total_cases, 
                listw=rsknn6, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm_moran
```

-   moran I statistic: \~0.073698 \> 0 show signs of clustering, but very weak clustering due to the value being close to 0

-   p-value = 0.071 \> 0.05, at the 95% confidence interval, we fail to reject the null hypothesis (which assumes spatial randomness), meaning to say that we do not have enough evidence to conclude that there is significant spatial autocorrelation and clustering.

Hence, we accept null hypothesis (h0), and conclude that the result is not statistically significant, suggesting that the observed spatial pattern could be due to spatial randomness.

#### 3. Visualising Monte Carlo Moran's I

-   Computing some basic statistics

```{r}
#compute mean
mean(bperm_moran$res[1:999])
cat('\n')

#compute variance
var(bperm_moran$res[1:999])
cat('\n')

#summary bperm
summary(bperm_moran$res[1:999])
```

-   plotting histogram using ggplot2

```{r}
data <- data.frame(simulated_morans_i = bperm_moran$res[1:999])

ggplot(data, aes(x = simulated_morans_i)) +
  geom_histogram(binwidth = (max(data$simulated_morans_i) - min(data$simulated_morans_i)) / 20, 
                 color = "black", fill = "pink") +  # Histogram
  geom_vline(xintercept = 0, color = "red", linetype = "solid") +  # Vertical line at x=0
  labs(x = "Simulated Moran's I", y = "Frequency") +  # Labels for x and y axis
  theme_minimal()  # Clean minimal theme

```

### 6.3 Spatial Correlogram

#### Compute Moran's I Spatial Correlogram

In the code chunk below,Â [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html)Â ofÂ **spdep**Â package is used to compute a [**6-lag**]{.underline} spatial correlogram of GDPPC. The global spatial autocorrelation used in Moranâ€™s I. TheÂ **plot()**Â of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(knn6,                            
                          thailand$total_cases,
                          order=6,  #lag-value: 6                           
                          method="I",                            
                          style="W",
                          zero.policy = TRUE) 

plot(MI_corr)
```

-   Looking at the first lag, it is positive, showing signs of clustering. This suggests that the the key indicators of drug abuse of Thailand have positive spatial dependence. The following lags after shows negative Moran I, showing signs of regular patterns amongst 2nd order neighbours and below.

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

------------------------------------------------------------------------

## 7.0 Local Measures of Spatial Autocorrelation

Simiarly, due to the non-linked region (i.e Phuket), we cannot use Queen and Rook methods to access local spatial autocorrelation, as it may lead to inaccuracies in the analysis. We need to use fixed-distance and adaptive-distance based methods for more reliable results.

We will detect the clusters, outliers, and hotspots using

-   *Getis-Ord G (Gi) Statistics:* Detect hotspots

    -   Deriving spatial weight matrix

    -   Computing Gi statistics

    -   Mapping Gi statistics

-   Local Moran's I: Detect local clusters (high-high and low-low) and local outliers (high-low, low-high)

### 7.1 Adaptive Distance Weight Matrix

-   stick to k=6, style='W'

```{r}
knn8 <- knn2nb(knearneigh(coords, k=6))
knn8
```

Next,Â *nb2listw()*Â is used to convert the nb object into spatial weights object.

```{r}
knn8_lw <- nb2listw(knn8, style = 'W')
summary(knn8_lw)
```

Here, we can see that all 77 provinces have exactly 6 links, and province like Phuket are not left behind.

### 7.2 LISA

### 7.2.1 Computing Local Moran's I

```{r}
fips <- order(thailand$ADM1_EN)
localMI <- localmoran(thailand$total_cases, knn8_lw)
head(localMI)
```

```{r}
printCoefmat(data.frame(
  localMI[fips,], 
  row.names=thailand$ADM1_EN[fips]),
  check.names=FALSE)
```

### 7.2.2 Mapping local Moran's I

#### Append to local Moran's I dataframe

```{r}
thailand.localMI <- cbind(thailand,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### Visualising local Moran's I statistic values and p-values

```{r}
#| fig-width: 12
#| fig-height: 10

localMI_statistic.map <- tm_shape(thailand.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local Moran's I statistic") +
  tm_borders(alpha = 0.5) + 
  tm_layout(
    main.title = "local Moran's I statistic",
    main.title.size = 1,
    main.title.position = "center")

localMI_pvalues.map <- tm_shape(thailand.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) + 
  tm_layout(
    main.title = "local Moran's I p-values",
    main.title.size = 1,
    main.title.position = "center")

tmap_arrange(localMI_statistic.map, localMI_pvalues.map, asp=1, ncol=2)
```

### 7.3 Creating LISA Cluster Map

### 7.3.1 Plotting Moran scatterplot

```{r}
nci <- moran.plot(thailand$total_cases, knn8_lw,                   
                  labels=as.character(thailand$ADM1_EN),                    
                  xlab="Total Cases over all years",                    
                  ylab="Spatially Lag Total Cases over all years")
```

What can infer from this plot?

-   Provinces in the high-high quadrant: Chachoengsao, Chon Buri, Ubon ratchathani. This suggests that there is positive autocorrelation and there is a high cluster among high neighbours.

-   Provinces in the High-Low quadrant: Chiang Mai, Nakhon si thammarat, and Bangkok. Meaning that there is negative autocorrelation and these provinces are the high outliers among the low neighbours.

### 7.3.2 Plotting Moran scatterplot with standardized variable

```{r}
thailand$Z.total_cases<- scale(thailand$total_cases) %>% 
  as.vector 
```

```{r}
nci2 <- moran.plot(thailand$total_cases, knn8_lw,                   
                  labels=as.character(thailand$ADM1_EN),                    
                  xlab="z- Total Cases over all years",                    
                  ylab="Spatially Lag z- Total Cases over all years")
```

### 7.3.3 LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
thailand$lag_total_cases <- lag.listw(knn8_lw, thailand$total_cases)
DV <- thailand$lag_total_cases - mean(thailand$lag_total_cases)    
LM_I <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4     
quadrant[localMI[,5]>signif] <- 0
```

### 7.3.4 **Plotting LISA map**

```{r}
#|fig-width: 12
#|fig-height: 10

total_cases <- qtm(thailand, "total_cases")


thailand.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(thailand.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(total_cases, LISAmap, 
             asp=1, ncol=2)
```

```{r}
outliers_hotspots <- thailand.localMI %>%
  filter(quadrant %in% c(1, 2, 3, 4)) %>%
  mutate(cluster = case_when(
    quadrant == 1 ~ "Low-Low (Hotspot)",
    quadrant == 2 ~ "Low-High (Outlier)",
    quadrant == 3 ~ "High-Low (Outlier)",
    quadrant == 4 ~ "High-High (Hotspot)",
    TRUE ~ "Insignificant"  # Just a fallback, should not occur
  ))

# Print the results
print(outliers_hotspots[, c("ADM1_EN", "quadrant", "cluster")])
```

We can infer that the outliers lie in the low-high quadrant and high-low quadrants, but there are high-low provinces which are considered outliers, but there are no high-low provinces that are considered significant. However, for the low-high quadrants, the provinces that are the outliers are: Pathum Thani, and Samut Sakhon.

### 7.4 Computing Gi Statistics (total cases over the years)

Next, we need to perform Gi Statistics, for each fixed distance and adaptive distances. The computed Gi statistic will give us a representation of a Z-score. Greater [**local Gi**]{.underline} represent a greater intensity of **clustering** and the direction (positive or negative) indicates **high or low clusters.**

### 7.4.1 Gi statistics for adaptive distance

```{r}
fips <- order(thailand$ADM1_EN) 
gi.adaptive <- localG(thailand$total_cases, knn8_lw) 
thailand.gi <- cbind(thailand, as.matrix(gi.adaptive)) %>%   
  rename(gstat_adaptive = as.matrix.gi.adaptive.)  

# Find the threshold for hotspot areas (e.g., top 5% of Gi scores) 
threshold <- quantile(thailand.gi$gstat_adaptive, 0.95)    
hotspots <- thailand.gi %>%   
  filter(gstat_adaptive >= threshold)
```

```{r}
hotspots_province_gstatscore <- hotspots %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore)
```

### 7.4.2 Plotting and Mapping Gi values with adaptive distance weights

```{r}
#| fig-width: 12 
#| fig-height: 10  

Gimap <- tm_shape(thailand.gi) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette="-RdBu",            
          title = "local Gi") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots) +    
  tm_text("ADM1_EN", size = 0.7, col="blue") +    
  tm_layout(     
    main.title = "Gi map showing hotspots",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,   # Reduce the text size     
    frame = FALSE)     

Gimap 
```

-   Similarly, what inference can we draw from the adaptive-based plot?

    -   There are two hotspots (red), with both hotspots found around the center of thailand comprising of 4 provinces (chachoengsao, rayong, chon buri, and samut prakan), with about gstat_adaptive score of about 2.74 to 3.82.

    -   Although, outside the scope of this take-home exercise 2, it can be greatly inferred that there is 3 clusters of coldspots, one huge coldspot situated near the north-west area, one in the center, and one in the south.

### 7.5 Computing Gi Statistics (total cases across the years)

### 7.5.1 Gi statistics for adaptive distance (year 2017)

```{r}
#| fig-width: 12 
#| fig-height: 10  

# Year 2017
total_cases_2017 <- "no_cases_2017"
gi.adaptive_2017 <- localG(thailand$no_cases_2017, knn8_lw) 

# Combine the results and create a new column for gstat_adaptive
thailand.gi_2017 <- thailand %>% 
  mutate(gstat_adaptive = gi.adaptive_2017)

# Find the threshold for hotspot areas (e.g., top 5% of Gi scores) 
threshold_2017 <- quantile(thailand.gi_2017$gstat_adaptive, 0.95)    
hotspots_2017 <- thailand.gi_2017 %>%   
  filter(gstat_adaptive >= threshold_2017)

hotspots_province_gstatscore_2017 <- hotspots_2017 %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore_2017)

# Create the map for 2017
Gimap_2017 <- tm_shape(thailand.gi_2017) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette = "-RdBu",            
          title = "Local Gi - 2017") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots_2017) +    
  tm_text("ADM1_EN", size = 0.7, col = "blue") +    
  tm_layout(     
    main.title = "Gi Map Showing Hotspots - 2017",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,     
    frame = FALSE)

Gimap_2017


```

### 7.5.2 Gi statistics for adaptive distance (year 2018)

```{r}
#| fig-width: 12 
#| fig-height: 10  
# Year 2018
total_cases_2018 <- "no_cases_2018"
gi.adaptive_2018 <- localG(thailand[[total_cases_2018]], knn8_lw) 
thailand.gi_2018 <- thailand %>% 
  mutate(gstat_adaptive = gi.adaptive_2018)
threshold_2018 <- quantile(thailand.gi_2018$gstat_adaptive, 0.95)    
hotspots_2018 <- thailand.gi_2018 %>% filter(gstat_adaptive >= threshold_2018)

hotspots_province_gstatscore_2018 <- hotspots_2018 %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore_2018)

# Create the map for 2018
Gimap_2018 <- tm_shape(thailand.gi_2018) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette = "-RdBu",            
          title = "Local Gi - 2018") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots_2018) +    
  tm_text("ADM1_EN", size = 0.7, col = "blue") +    
  tm_layout(     
    main.title = "Gi map showing hotspots",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,   # Reduce the text size     
    frame = FALSE)

Gimap_2018
```

### 7.5.3 Gi statistics for adaptive distance (year 2019)

```{r}
#| fig-width: 12 
#| fig-height: 10  
# Year 2019
total_cases_2019 <- "no_cases_2019"
gi.adaptive_2019 <- localG(thailand[[total_cases_2019]], knn8_lw) 
thailand.gi_2019 <- thailand %>% 
  mutate(gstat_adaptive = gi.adaptive_2019)
threshold_2019 <- quantile(thailand.gi_2019$gstat_adaptive, 0.95)    
hotspots_2019 <- thailand.gi_2019 %>% filter(gstat_adaptive >= threshold_2019)

hotspots_province_gstatscore_2019 <- hotspots_2019 %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore_2019)

# Create the map for 2019
Gimap_2019 <- tm_shape(thailand.gi_2019) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette = "-RdBu",            
          title = "Local Gi - 2019") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots_2019) +    
  tm_text("ADM1_EN", size = 0.7, col = "blue") +    
  tm_layout(     
    main.title = "Gi Map Showing Hotspots - 2019",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,     
    frame = FALSE)

Gimap_2019
```

### 7.5.4 Gi statistics for adaptive distance (year 2020)

```{r}
# Year 2020
total_cases_2020 <- "no_cases_2020"
gi.adaptive_2020 <- localG(thailand[[total_cases_2020]], knn8_lw) 
thailand.gi_2020 <- thailand %>% 
  mutate(gstat_adaptive = gi.adaptive_2020)
threshold_2020 <- quantile(thailand.gi_2020$gstat_adaptive, 0.95)    
hotspots_2020 <- thailand.gi_2020 %>% filter(gstat_adaptive >= threshold_2020)

hotspots_province_gstatscore_2020 <- hotspots_2020 %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore_2020)

# Create the map for 2020
Gimap_2020 <- tm_shape(thailand.gi_2020) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette = "-RdBu",            
          title = "Local Gi - 2020") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots_2020) +    
  tm_text("ADM1_EN", size = 0.7, col = "blue") +    
  tm_layout(     
    main.title = "Gi Map Showing Hotspots - 2020",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,     
    frame = FALSE)

Gimap_2020
```

### 7.5.5 Gi statistics for adaptive distance (year 2021)

```{r}
#| fig-width: 12 
#| fig-height: 10  
# Year 2021
total_cases_2021 <- "no_cases_2021"
gi.adaptive_2021 <- localG(thailand[[total_cases_2021]], knn8_lw) 
thailand.gi_2021 <- thailand %>% 
  mutate(gstat_adaptive = gi.adaptive_2021)
threshold_2021 <- quantile(thailand.gi_2021$gstat_adaptive, 0.95)    
hotspots_2021 <- thailand.gi_2021 %>% filter(gstat_adaptive >= threshold_2021)

hotspots_province_gstatscore_2021 <- hotspots_2021 %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore_2021)

# Create the map for 2021
Gimap_2021 <- tm_shape(thailand.gi_2021) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette = "-RdBu",            
          title = "Local Gi - 2021") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots_2021) +    
  tm_text("ADM1_EN", size = 0.7, col = "blue") +    
  tm_layout(     
    main.title = "Gi Map Showing Hotspots - 2021",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,     
    frame = FALSE)

Gimap_2021
```

### 7.5.6 Gi statistics for adaptive distance (year 2022)

```{r}
#| fig-width: 12 
#| fig-height: 10  
# Year 2022
total_cases_2022 <- "no_cases_2022"
gi.adaptive_2022 <- localG(thailand[[total_cases_2022]], knn8_lw) 
thailand.gi_2022 <- thailand %>% 
  mutate(gstat_adaptive = gi.adaptive_2022)
threshold_2022 <- quantile(thailand.gi_2022$gstat_adaptive, 0.95)    
hotspots_2022 <- thailand.gi_2022 %>% filter(gstat_adaptive >= threshold_2022)

hotspots_province_gstatscore_2022 <- hotspots_2022 %>%   
  select(ADM1_EN, gstat_adaptive) %>%   
  arrange(desc(gstat_adaptive))   

print(hotspots_province_gstatscore_2022)

# Create the map for 2022
Gimap_2022 <- tm_shape(thailand.gi_2022) +    
  tm_fill(col = "gstat_adaptive",            
          style = "pretty",            
          palette = "-RdBu",            
          title = "Local Gi - 2022") +    
  tm_borders(alpha = 0.5) +   
  tm_shape(hotspots_2022) +    
  tm_text("ADM1_EN", size = 0.7, col = "blue") +    
  tm_layout(     
    main.title = "Gi Map Showing Hotspots - 2022",     
    main.title.size = 1,     
    main.title.position = "center",     
    legend.show = TRUE,     
    legend.text.size = 1,     
    frame = FALSE)

Gimap_2022
```

### 7.5.7 Interpretation of results

We can see the hotspots remain around the same area (around the center) from 2017-2020, but changes towards the north-east area (2022: nong bua lam phu, sakon nakhon, amnat charoen, khon kaen). This shows that the hotspots depicting the highest drug cases changed from the center area to north-east area.
