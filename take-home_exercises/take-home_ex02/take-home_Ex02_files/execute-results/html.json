{
  "hash": "b4c7538f641bb36c5fae0d9ac39940f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level\"\nauthor: \"Marcus Jaeson Yeo\"\ndate: \"September 26, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n---\n\n\n## 1.0 Introduction\n\n#### Context:\n\nDrug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people, aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\n\nThe geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\n\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\n\nFigure below shows geographic distribution of drug use cases by province and by year.\n\n#### Objectives:\n\n-   if the key indicators of drug abuse of Thailand are independent from space. (spatial independent, randomly distributed) (spatial weights and applications)\n\n-   If the indicators of drug abuse is indeed spatial dependent, then, you would like to detect where are the clusters and outliers, and the hotspots. (no need for emerging hotspots)\n\n-   Last but not least, you are also interested to investigate how the observation above evolve over time. (no need for spatial-temporal)\n\n------------------------------------------------------------------------\n\n## 2.0 Importing Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, lubridate, tmap, tidyverse, spdep, sfdep, smoothr, dplyr, tidyr)\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## 3.0 Importing Datasets into Environment\n\n-   geospatial (admin1 (province level))\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    thailand_boundary = st_read(dsn=\"data/geospatial/\",\n            layer=\"tha_admbnda_adm1_rtsd_20220121\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Reading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n      `C:\\marcus159260\\IS415-GAA\\take-home_exercises\\take-home_ex02\\data\\geospatial' \n      using driver `ESRI Shapefile'\n    Simple feature collection with 77 features and 16 fields\n    Geometry type: MULTIPOLYGON\n    Dimension:     XY\n    Bounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\n    Geodetic CRS:  WGS 84\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    dim(thailand_boundary)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 77 17\n    ```\n    \n    \n    :::\n    :::\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # plot(thailand_boundary, max.plot=16)\n    ```\n    :::\n\n\n-   aspatial\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    thailand_sf <- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\")\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    Rows: 7392 Columns: 5\n    ── Column specification ────────────────────────────────────────────────────────\n    Delimiter: \",\"\n    chr (3): types_of_drug_offenses, province_th, province_en\n    dbl (2): fiscal_year, no_cases\n    \n    ℹ Use `spec()` to retrieve the full column specification for this data.\n    ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    dim(thailand_sf)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 7392    5\n    ```\n    \n    \n    :::\n    :::\n\n\n------------------------------------------------------------------------\n\n## 4.0 Data Wrangling + necessary Projection Transformation\n\n### 4.1 Dropping redundant columns + Left Join\n\n-   Dropping columns with NA and columns that do not give us valuable information\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_boundary <- thailand_boundary %>%\n  select(1:3, 14:17)\n\nthailand_sf <- thailand_sf %>%\n  select(1:3, 5)\n```\n:::\n\n\n-   We need to further understand a bit more about the common identifier (province), hence printing the unique provinces, which is both [76]{.underline} unique provinces for both boundary and sf.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_provinces_boundary <- unique(thailand_boundary$ADM1_EN)\nunique_provinces_boundary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bangkok\"                  \"Samut Prakan\"            \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Ang Thong\"               \n [7] \"Lop Buri\"                 \"Sing Buri\"               \n [9] \"Chai Nat\"                 \"Saraburi\"                \n[11] \"Chon Buri\"                \"Rayong\"                  \n[13] \"Chanthaburi\"              \"Trat\"                    \n[15] \"Chachoengsao\"             \"Prachin Buri\"            \n[17] \"Nakhon Nayok\"             \"Sa Kaeo\"                 \n[19] \"Nakhon Ratchasima\"        \"Buri Ram\"                \n[21] \"Surin\"                    \"Si Sa Ket\"               \n[23] \"Ubon Ratchathani\"         \"Yasothon\"                \n[25] \"Chaiyaphum\"               \"Amnat Charoen\"           \n[27] \"Bueng Kan\"                \"Nong Bua Lam Phu\"        \n[29] \"Khon Kaen\"                \"Udon Thani\"              \n[31] \"Loei\"                     \"Nong Khai\"               \n[33] \"Maha Sarakham\"            \"Roi Et\"                  \n[35] \"Kalasin\"                  \"Sakon Nakhon\"            \n[37] \"Nakhon Phanom\"            \"Mukdahan\"                \n[39] \"Chiang Mai\"               \"Lamphun\"                 \n[41] \"Lampang\"                  \"Uttaradit\"               \n[43] \"Phrae\"                    \"Nan\"                     \n[45] \"Phayao\"                   \"Chiang Rai\"              \n[47] \"Mae Hong Son\"             \"Nakhon Sawan\"            \n[49] \"Uthai Thani\"              \"Kamphaeng Phet\"          \n[51] \"Tak\"                      \"Sukhothai\"               \n[53] \"Phitsanulok\"              \"Phichit\"                 \n[55] \"Phetchabun\"               \"Ratchaburi\"              \n[57] \"Kanchanaburi\"             \"Suphan Buri\"             \n[59] \"Nakhon Pathom\"            \"Samut Sakhon\"            \n[61] \"Samut Songkhram\"          \"Phetchaburi\"             \n[63] \"Prachuap Khiri Khan\"      \"Nakhon Si Thammarat\"     \n[65] \"Krabi\"                    \"Phangnga\"                \n[67] \"Phuket\"                   \"Surat Thani\"             \n[69] \"Ranong\"                   \"Chumphon\"                \n[71] \"Songkhla\"                 \"Satun\"                   \n[73] \"Trang\"                    \"Phatthalung\"             \n[75] \"Pattani\"                  \"Yala\"                    \n[77] \"Narathiwat\"              \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_provinces_sf <- unique(thailand_sf$province_en)\nunique_provinces_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bangkok\"                  \"Chai Nat\"                \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Loburi\"                  \n [7] \"Samut Prakan\"             \"Saraburi\"                \n [9] \"Sing Buri\"                \"Ang Thong\"               \n[11] \"Chanthaburi\"              \"Chachoengsao\"            \n[13] \"Chon Buri\"                \"Trat\"                    \n[15] \"Nakhon Nayok\"             \"Prachin Buri\"            \n[17] \"Rayong\"                   \"Sa Kaeo\"                 \n[19] \"Chaiyaphum\"               \"Nakhon Ratchasima\"       \n[21] \"Buri Ram\"                 \"Yasothon\"                \n[23] \"Si Sa Ket\"                \"Surin\"                   \n[25] \"Amnat Charoen\"            \"Ubon Ratchathani\"        \n[27] \"Kalasin\"                  \"Khon Kaen\"               \n[29] \"Nakhon Phanom\"            \"buogkan\"                 \n[31] \"Maha Sarakham\"            \"Mukdahan\"                \n[33] \"Roi Et\"                   \"Loei\"                    \n[35] \"Sakon Nakhon\"             \"Nong Khai\"               \n[37] \"Nong Bua Lam Phu\"         \"Udon Thani\"              \n[39] \"Chiang Rai\"               \"Chiang Mai\"              \n[41] \"Nan\"                      \"Phayao\"                  \n[43] \"Phrae\"                    \"Mae Hong Son\"            \n[45] \"Lampang\"                  \"Lamphun\"                 \n[47] \"Kamphaeng Phet\"           \"Tak\"                     \n[49] \"Nakhon Sawan\"             \"Phichit\"                 \n[51] \"Phitsanulok\"              \"Phetchabun\"              \n[53] \"Sukhothai\"                \"Uttaradit\"               \n[55] \"Uthai Thani\"              \"Kanchanaburi\"            \n[57] \"Nakhon Pathom\"            \"Prachuap Khiri Khan\"     \n[59] \"Phetchaburi\"              \"Ratchaburi\"              \n[61] \"Samut Songkhram\"          \"Samut Sakhon\"            \n[63] \"Suphan Buri\"              \"Krabi\"                   \n[65] \"Chumphon\"                 \"Nakhon Si Thammarat\"     \n[67] \"Phangnga\"                 \"Phuket\"                  \n[69] \"Ranong\"                   \"Surat Thani\"             \n[71] \"Trang\"                    \"Narathiwat\"              \n[73] \"Pattani\"                  \"Phatthalung\"             \n[75] \"Yala\"                     \"Songkhla\"                \n[77] \"Satun\"                   \n```\n\n\n:::\n:::\n\n\n-   After studying the columns of both the geospatial and aspatial data, we see that the aspatial data (thailand_sf) lacks geometrical data (such as the latitude and longitude spatial features). We need to join both boundary and working data with its common columns: **ADM1_EN** (thailand_boundary) and **province_en** (thailand_sf).\n\n    -   First, we need to mutate to get the common identifier\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_boundary <- thailand_boundary %>%\n  mutate(ADM1_EN = str_to_lower(ADM1_EN),  # Convert to lowercase\n         ADM1_EN = str_trim(ADM1_EN))\n\nthailand_sf <- thailand_sf %>%\n  mutate(province_en = str_to_lower(province_en),  # Convert to lowercase\n         province_en = str_trim(province_en))\n```\n:::\n\n\n-   Second, we perform a left join. After left join, impute the 2 province rows with missing values with the mean values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_left_join <- thailand_boundary %>%\n  left_join(thailand_sf, by = c(\"ADM1_EN\" = \"province_en\")) %>%\n  select(3:4, 7:10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_provinces <- thailand_left_join %>%\n  filter(is.na(no_cases)) %>%  # Check for NA in the case column\n  select(ADM1_EN)\n\nprint(missing_provinces)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 100.42 ymin: 14.64684 xmax: 104.19 ymax: 18.44898\nGeodetic CRS:  WGS 84\n    ADM1_EN                       geometry\n1  Lop Buri MULTIPOLYGON (((101.3453 15...\n2 Bueng Kan MULTIPOLYGON (((103.405 18....\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_left_join_filtered <- thailand_left_join %>%\n  filter(!is.na(no_cases))  # Exclude rows where no_cases is NA\n```\n:::\n\n\n### 4.2 Dropping and summing total number of drug cases\n\n#### Understanding our data\n\n-   unique years, provinces, and types of drug offenses\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_years = unique(thailand_left_join_filtered$fiscal_year)\nunique_provinces = unique(thailand_left_join_filtered$ADM1_EN)\nunique_types = unique(thailand_left_join_filtered$types_of_drug_offenses)\n\nunique_years\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2017 2018 2019 2020 2021 2022\n```\n\n\n:::\n\n```{.r .cell-code}\ncat('\\n')\n```\n\n```{.r .cell-code}\nunique_provinces\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bangkok\"                  \"Samut Prakan\"            \n [3] \"Nonthaburi\"               \"Pathum Thani\"            \n [5] \"Phra Nakhon Si Ayutthaya\" \"Ang Thong\"               \n [7] \"Sing Buri\"                \"Chai Nat\"                \n [9] \"Saraburi\"                 \"Chon Buri\"               \n[11] \"Rayong\"                   \"Chanthaburi\"             \n[13] \"Trat\"                     \"Chachoengsao\"            \n[15] \"Prachin Buri\"             \"Nakhon Nayok\"            \n[17] \"Sa Kaeo\"                  \"Nakhon Ratchasima\"       \n[19] \"Buri Ram\"                 \"Surin\"                   \n[21] \"Si Sa Ket\"                \"Ubon Ratchathani\"        \n[23] \"Yasothon\"                 \"Chaiyaphum\"              \n[25] \"Amnat Charoen\"            \"Nong Bua Lam Phu\"        \n[27] \"Khon Kaen\"                \"Udon Thani\"              \n[29] \"Loei\"                     \"Nong Khai\"               \n[31] \"Maha Sarakham\"            \"Roi Et\"                  \n[33] \"Kalasin\"                  \"Sakon Nakhon\"            \n[35] \"Nakhon Phanom\"            \"Mukdahan\"                \n[37] \"Chiang Mai\"               \"Lamphun\"                 \n[39] \"Lampang\"                  \"Uttaradit\"               \n[41] \"Phrae\"                    \"Nan\"                     \n[43] \"Phayao\"                   \"Chiang Rai\"              \n[45] \"Mae Hong Son\"             \"Nakhon Sawan\"            \n[47] \"Uthai Thani\"              \"Kamphaeng Phet\"          \n[49] \"Tak\"                      \"Sukhothai\"               \n[51] \"Phitsanulok\"              \"Phichit\"                 \n[53] \"Phetchabun\"               \"Ratchaburi\"              \n[55] \"Kanchanaburi\"             \"Suphan Buri\"             \n[57] \"Nakhon Pathom\"            \"Samut Sakhon\"            \n[59] \"Samut Songkhram\"          \"Phetchaburi\"             \n[61] \"Prachuap Khiri Khan\"      \"Nakhon Si Thammarat\"     \n[63] \"Krabi\"                    \"Phangnga\"                \n[65] \"Phuket\"                   \"Surat Thani\"             \n[67] \"Ranong\"                   \"Chumphon\"                \n[69] \"Songkhla\"                 \"Satun\"                   \n[71] \"Trang\"                    \"Phatthalung\"             \n[73] \"Pattani\"                  \"Yala\"                    \n[75] \"Narathiwat\"              \n```\n\n\n:::\n\n```{.r .cell-code}\ncat('\\n')\n```\n\n```{.r .cell-code}\nunique_types\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"drug_use_cases\"                                        \n [2] \"suspects_in_drug_use_cases\"                            \n [3] \"possession_cases\"                                      \n [4] \"suspects_in_possession_cases\"                          \n [5] \"possession_with_intent_to_distribute_cases\"            \n [6] \"suspects_in_possession_with_intent_to_distribute_cases\"\n [7] \"trafficking_cases\"                                     \n [8] \"suspects_in_trafficking_cases\"                         \n [9] \"production_cases\"                                      \n[10] \"suspects_in_production_cases\"                          \n[11] \"import_cases\"                                          \n[12] \"suspects_in_import_cases\"                              \n[13] \"export_cases\"                                          \n[14] \"suspects_in_export_cases\"                              \n[15] \"conspiracy_cases\"                                      \n[16] \"suspects_in_conspiracy_cases\"                          \n```\n\n\n:::\n:::\n\n\n#### Filtering and Data Wrangling\n\n-   As we are only interested in drug_cases under the types_of_drug_offenses, we need to filter based on that.\n\n-   Lets drop both date and types_of_drug_offenses column, Sum all the no_cases by each year and province and sort them ascending, drop rows where the total_cases are 0.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand <- thailand_left_join_filtered %>%\n  select(\"ADM1_EN\", \"fiscal_year\", \"types_of_drug_offenses\", \"no_cases\", \"geometry\") %>%\n  filter(types_of_drug_offenses == \"drug_use_cases\") %>%\n  filter(no_cases > 0) %>%\n  arrange(fiscal_year)\n\nthailand\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 450 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                    ADM1_EN fiscal_year types_of_drug_offenses no_cases\n1                   Bangkok        2017         drug_use_cases    11871\n2              Samut Prakan        2017         drug_use_cases      820\n3                Nonthaburi        2017         drug_use_cases      553\n4              Pathum Thani        2017         drug_use_cases      450\n5  Phra Nakhon Si Ayutthaya        2017         drug_use_cases      378\n6                 Ang Thong        2017         drug_use_cases      208\n7                 Sing Buri        2017         drug_use_cases      127\n8                  Chai Nat        2017         drug_use_cases      200\n9                  Saraburi        2017         drug_use_cases       69\n10                Chon Buri        2017         drug_use_cases     4180\n                         geometry\n1  MULTIPOLYGON (((100.6139 13...\n2  MULTIPOLYGON (((100.7306 13...\n3  MULTIPOLYGON (((100.3415 14...\n4  MULTIPOLYGON (((100.8916 14...\n5  MULTIPOLYGON (((100.5131 14...\n6  MULTIPOLYGON (((100.3332 14...\n7  MULTIPOLYGON (((100.3691 15...\n8  MULTIPOLYGON (((100.1199 15...\n9  MULTIPOLYGON (((101.3994 15...\n10 MULTIPOLYGON (((100.9719 12...\n```\n\n\n:::\n:::\n\n\n#### Pivoting the fiscal years to get unique Polygons\n\n-   We do this because when we do polygonal rendering, there are 6 copies (years 2017-2022) of the same polygons, which will slow down the time it takes to execute the process such as the poly2nb() spatial weights when we attempt to find the neighbours of regions. Hence, we need to **reshape** the dataframe using pivot_wider() to [reduce the number of rows]{.underline} (450/6 = 75), and make the [geometry polygons unique]{.underline}, while keeping our provinces unique as well. This is done by transposing the fiscal_year and no_cases to more columns by the number of cases in each year (no_cases\\_\\<year\\>).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivoting data to widen fiscal_year into separate no_cases columns by year\nthailand <- thailand %>%\n  group_by(ADM1_EN, geometry) %>%\n  pivot_wider(names_from = fiscal_year, \n              values_from = no_cases,\n              names_prefix = \"no_cases_\") %>%\n  ungroup()\n```\n:::\n\n\n### 4.3 Projection Transformation\n\nSince the EPSG code is 4326, which is the global code. We want to change both the EPSG code of the boundary data and working data to Thailand's global projection system. Acquiring the code from <https://epsg.io/32647>\n\n-   We will transform the it to Thailand's projected coordinate system (UTM Zone 47N) with the EPSG code: 32647\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand <- thailand %>%\n  st_transform(crs=32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thailand)\n```\n:::\n\n\n#### 4.3 Plotting the shapefile object to visualise structure\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_shp = st_read(\"data/geospatial/tha_admbnda_adm1_rtsd_20220121.shp\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nboundary_plot <- tmap_mode(\"plot\")\ntm_shape(thailand_shp)+\n  tm_fill(col=\"white\")+\n  tm_borders(col = \"black\", lwd=0.3, alpha=0.6)+\n  tm_layout(\n    main.title = \"Provinces\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n     frame = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# basemap <- tm_shape(thailand) +\n#   tm_polygons() +\n#   tm_text(\"ADM1_EN\", size=0.5)\n# \n# drug_cases <- qtm(thailand, \"no_cases\")\n# tmap_arrange(basemap, drug_cases, asp=1, ncol=2)\n```\n:::\n\n\n#### 4.4 Writing and Reading into RDS format\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#thailand combined dataframe\nwrite_rds(thailand, \"data/rds/thailand.rds\")\n\n#plot\n# write_rds(boundary_plot, \"data/rds/boundary_plot.rds\")\n# write_rds(basemap, \"data/rds/basemap.rds\")\n# write_rds(drug_cases, \"data/rds/drug_cases.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand <- read_rds(\"data/rds/thailand.rds\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## 5.0 Exploratory Spatial Data Analysis\n\n-   min and max total no of drug cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_cases = min(thailand$no_cases, na.rm = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `no_cases`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in min(thailand$no_cases, na.rm = FALSE): no non-missing arguments to\nmin; returning Inf\n```\n\n\n:::\n\n```{.r .cell-code}\nmax_cases = max(thailand$no_cases, na.rm = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Unknown or uninitialised column: `no_cases`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in max(thailand$no_cases, na.rm = FALSE): no non-missing arguments to\nmax; returning -Inf\n```\n\n\n:::\n\n```{.r .cell-code}\nmin_cases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Inf\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\n\")\n```\n\n```{.r .cell-code}\nmax_cases\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -Inf\n```\n\n\n:::\n:::\n\n\n### 5.1 Plotting\n\n### 5.1.1 Total number of cases by each year and each province\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_cases <- min(thailand$no_cases_2017, thailand$no_cases_2018, na.rm = TRUE)\nmax_cases <- max(thailand$no_cases_2017, thailand$no_cases_2018, na.rm = TRUE)\n\n# Define custom breaks based on the range\ncustom_breaks <- seq(min_cases, max_cases, length.out = 5)\n\nplot_2017 <- tm_shape(thailand) +\n  tm_polygons(\"no_cases_2017\",\n          palette = \"Blues\",\n          breaks = custom_breaks, \n          title = \"Drug Cases (2017)\") +\n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Drug Use Cases in Thailand (2017)\",  # Main title for the plot\n            title.size = 1.5,\n            legend.outside = TRUE,  # Legend outside the map area\n            asp = 0.8,              # Control aspect ratio\n            frame = TRUE)          # Remove the frame around the plot\n\nplot_2018 <- tm_shape(thailand) +\n  tm_polygons(\"no_cases_2018\",\n          palette = \"Blues\",\n          breaks = custom_breaks, \n          title = \"Drug Cases (2018)\") +\n  tm_borders(alpha = 0.5) + \n  tm_layout(main.title = \"Drug Use Cases in Thailand (2017)\",  # Main title for the plot\n            title.size = 1.5,\n            legend.outside = TRUE,  # Legend outside the map area\n            asp = 0.8,              # Control aspect ratio\n            frame = TRUE)          # Remove the frame around the plot\n\n# plot_2017\n# plot_2018\ntmap_arrange(plot_2017, plot_2018, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.59, 0.54, 0.50. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.59, 0.54, 0.50. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take-home_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### 5.1.2 Side by side view of province and total no of drug cases in year 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# provinces <- tm_shape(thailand %>% filter(fiscal_year == 2017)) +\n#   tm_polygons() +\n#   tm_text(\"ADM1_EN\", size=0.5)\n# \n# custom_breaks <- c(0, 5000, 10000, 15000, 20000)  # Customize as necessary\n# \n# # total_cases <- qtm(thailand_summary, \"total_cases\")\n# no_cases <- tm_shape(thailand) +\n#   tm_polygons(\"no_cases\", \n#               breaks = custom_breaks,  # Apply the custom breaks\n#               palette = \"Blues\",        # Color palette\n#               title = \"Number of Cases\")    # Title for the legend\n# tmap_arrange(provinces, no_cases, asp=1, ncol=2)\n```\n:::\n\n\n### 5.1.3 Top 5 Provinces with the highest number of drug cases in year 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Find the top 5 provinces with the highest total cases\n# top_5_provinces <- thailand %>%\n#   filter(fiscal_year == 2017) %>%\n#   arrange(desc(no_cases)) %>%\n#   slice_head(n = 5)  # Select the top 5 rows\n# \n# # Step 2: Highlight the top 5 provinces\n# provinces <- tm_shape(thailand %>% filter(fiscal_year == 2017)) +\n#   tm_polygons() +\n#   tm_text(\"ADM1_EN\", size = 0.5)\n# \n# # Apply custom breaks to the total_cases plot\n# no_cases <- tm_shape(thailand %>% filter(fiscal_year == 2017)) +\n#   tm_polygons(\"no_cases\", \n#               breaks = custom_breaks,  # Apply the custom breaks\n#               palette = \"Blues\",        # Color palette\n#               title = \"Total Cases\") +\n#   tm_borders(alpha = 0.5)\n# \n# # Step 3: Highlight the top 5 provinces on the same plot\n# highlight_top_5 <- tm_shape(top_5_provinces) +\n#   tm_borders(col = \"red\", lwd = 3) +  # Use red borders to highlight\n#   tm_text(\"ADM1_EN\", size = 0.7, col = \"red\", fontface = \"bold\")  # Optional: Label them\n# \n# # Step 4: Arrange the plots\n# tmap_arrange(provinces, no_cases + highlight_top_5, asp = 1, ncol = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#|eval: false\n# plot_2018 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2018)) + \n#   tm_fill(\"total_cases\", n = 5, style = \"equal\") + tm_borders() + tm_layout(main.title = \"2018\")\n# \n# plot_2019 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2019)) + \n#   tm_fill(\"total_cases\", n = 5, style = \"equal\") + tm_borders() + tm_layout(main.title = \"2019\")\n# \n# plot_2020 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2020)) + \n#   tm_fill(\"total_cases\", n = 5, style = \"equal\") + tm_borders() + tm_layout(main.title = \"2020\")\n# \n# plot_2021 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2021)) + \n#   tm_fill(\"total_cases\", n = 5, style = \"equal\") + tm_borders() + tm_layout(main.title = \"2021\")\n# \n# plot_2022 <- tm_shape(thailand_summary %>% filter(fiscal_year == 2022)) + \n#   tm_fill(\"total_cases\", n = 5, style = \"equal\") + tm_borders() + tm_layout(main.title = \"2022\")\n# \n# # Arrange them\n# tmap_arrange(plot_2017, plot_2018, plot_2019, plot_2020, plot_2021, plot_2022, ncol = 2)\n```\n:::\n\n\n### 5.2 Visualising Equal and Quantile in year 2017\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# equal <- tm_shape(thailand_summary %>% filter(fiscal_year == 2017)) + \n#   tm_polygons(\"total_cases\",\n#           palette = \"Blues\",\n#           style=\"equal\", n=10) + \n#   tm_borders(alpha = 0.5) + \n#   tm_layout(main.title = \"Equal interval classification (year 2017)\", title.size = 2)\n# \n# quantile <- tm_shape(thailand_summary %>% filter(fiscal_year == 2017)) +\n#   tm_polygons(\"total_cases\",\n#           palette = \"Blues\",\n#           style=\"quantile\", n=10) +\n#   tm_layout(main.title = \"Quantile interval classification (year 2017)\", title.size = 2)\n# \n# tmap_arrange(equal, \n#              quantile, \n#              asp=1, \n#              ncol=2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# write_rds(equal, \"data/rds/equal.rds\")\n# write_rds(quantile, \"data/rds/quantile.rds\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n## 6.0 Global Measures of Spatial Autocorrelation\n\n-   If we attempt to use contiguity-based spatial weights to find neighbours, and use the queen method, we come up with a region that is not linked to any neighbours, which is incorrect. Hence, we need to swap to using distance-based method to find neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(thailand, \n                queen = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(thailand, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(thailand, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 75 \nNumber of nonzero links: 330 \nPercentage nonzero weights: 5.866667 \nAverage number of links: 4.4 \n1 region with no links:\n65\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  6 18 14 16 11  5  1  2 \n1 least connected region:\n13 with 1 link\n2 most connected regions:\n27 49 with 9 links\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(wm_q, \"data/rds/wm_q.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- read_rds(\"data/rds/wm_q.rds\")\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 75 \nNumber of nonzero links: 330 \nPercentage nonzero weights: 5.866667 \nAverage number of links: 4.4 \n1 region with no links:\n65\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  6 18 14 16 11  5  1  2 \n1 least connected region:\n13 with 1 link\n2 most connected regions:\n27 49 with 9 links\n```\n\n\n:::\n:::\n\n\n### 6.1 Configuring and Binding coordinates\n\n#### Computing longitude and latitude to achieve coordinates\n\n-   longitude\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(thailand$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\n-   latitude\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude <- map_dbl(thailand$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n-   bind the coordinates\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- cbind(longitude, latitude)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,]  675514.6  1523087\n[2,]  685033.7  1503755\n[3,]  650477.2  1539777\n[4,]  681656.0  1555581\n[5,]  664627.1  1586462\n[6,]  645239.0  1617118\n```\n\n\n:::\n:::\n\n\n### 6.2 Computing distance-based neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1 <- knn2nb(knearneigh(coords))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords)): neighbour object has 19 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1dists <- unlist(nbdists(k1, coords, longlat = FALSE))\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21548   50601   64530   63106   76823  110987 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n## This summary report shows that the largest first nearest neighbour distance is 110987 meters (UTM). As dnearneigh accepts meters and we need specify longlat = FALSE, lets round it up to 111000 meters and use this as our upper threshold will ensure us that all regions will at least have 1 neighbour.\n:::\n\n### 6.2.1 Fixed Distance\n\n-   within 111000 meters radius\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d111000 <- dnearneigh(coords, 0, 111000, longlat = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in dnearneigh(coords, 0, 111000, longlat = FALSE): neighbour object has\n2 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nwm_d111000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 75 \nNumber of nonzero links: 332 \nPercentage nonzero weights: 5.902222 \nAverage number of links: 4.426667 \n2 disjoint connected subgraphs\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(thailand$ADM1_EN, card(wm_d111000))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          \n                           1 2 3 4 5 6 8 9 10 12 13 14\n  amnat charoen            0 0 0 1 0 0 0 0  0  0  0  0\n  ang thong                0 0 0 0 0 0 0 0  1  0  0  0\n  bangkok                  0 0 0 0 0 0 0 0  0  1  0  0\n  buri ram                 0 1 0 0 0 0 0 0  0  0  0  0\n  chachoengsao             0 0 0 0 0 0 0 1  0  0  0  0\n  chai nat                 0 0 0 0 0 1 0 0  0  0  0  0\n  chaiyaphum               0 1 0 0 0 0 0 0  0  0  0  0\n  chanthaburi              0 0 0 0 1 0 0 0  0  0  0  0\n  chiang mai               0 0 1 0 0 0 0 0  0  0  0  0\n  chiang rai               1 0 0 0 0 0 0 0  0  0  0  0\n  chon buri                0 0 0 0 0 1 0 0  0  0  0  0\n  chumphon                 1 0 0 0 0 0 0 0  0  0  0  0\n  kalasin                  0 0 0 1 0 0 0 0  0  0  0  0\n  kamphaeng phet           0 0 0 0 1 0 0 0  0  0  0  0\n  kanchanaburi             0 1 0 0 0 0 0 0  0  0  0  0\n  khon kaen                0 0 1 0 0 0 0 0  0  0  0  0\n  krabi                    0 0 0 0 1 0 0 0  0  0  0  0\n  lampang                  0 0 1 0 0 0 0 0  0  0  0  0\n  lamphun                  0 1 0 0 0 0 0 0  0  0  0  0\n  loei                     1 0 0 0 0 0 0 0  0  0  0  0\n  mae hong son             1 0 0 0 0 0 0 0  0  0  0  0\n  maha sarakham            0 0 1 0 0 0 0 0  0  0  0  0\n  mukdahan                 0 0 0 0 1 0 0 0  0  0  0  0\n  nakhon nayok             0 0 0 0 0 0 0 1  0  0  0  0\n  nakhon pathom            0 0 0 0 0 0 0 0  1  0  0  0\n  nakhon phanom            0 1 0 0 0 0 0 0  0  0  0  0\n  nakhon ratchasima        1 0 0 0 0 0 0 0  0  0  0  0\n  nakhon sawan             0 0 0 0 1 0 0 0  0  0  0  0\n  nakhon si thammarat      0 0 0 1 0 0 0 0  0  0  0  0\n  nan                      0 1 0 0 0 0 0 0  0  0  0  0\n  narathiwat               0 1 0 0 0 0 0 0  0  0  0  0\n  nong bua lam phu         0 0 0 1 0 0 0 0  0  0  0  0\n  nong khai                0 1 0 0 0 0 0 0  0  0  0  0\n  nonthaburi               0 0 0 0 0 0 0 0  0  0  1  0\n  pathum thani             0 0 0 0 0 0 0 0  0  0  0  1\n  pattani                  0 0 1 0 0 0 0 0  0  0  0  0\n  phangnga                 0 0 1 0 0 0 0 0  0  0  0  0\n  phatthalung              0 0 0 1 0 0 0 0  0  0  0  0\n  phayao                   0 1 0 0 0 0 0 0  0  0  0  0\n  phetchabun               0 0 1 0 0 0 0 0  0  0  0  0\n  phetchaburi              0 0 0 1 0 0 0 0  0  0  0  0\n  phichit                  0 0 0 1 0 0 0 0  0  0  0  0\n  phitsanulok              0 0 0 1 0 0 0 0  0  0  0  0\n  phra nakhon si ayutthaya 0 0 0 0 0 0 0 0  0  1  0  0\n  phrae                    0 0 0 1 0 0 0 0  0  0  0  0\n  phuket                   0 1 0 0 0 0 0 0  0  0  0  0\n  prachin buri             0 0 0 0 0 1 0 0  0  0  0  0\n  prachuap khiri khan      1 0 0 0 0 0 0 0  0  0  0  0\n  ranong                   0 1 0 0 0 0 0 0  0  0  0  0\n  ratchaburi               0 0 0 0 1 0 0 0  0  0  0  0\n  rayong                   0 0 1 0 0 0 0 0  0  0  0  0\n  roi et                   0 0 0 0 1 0 0 0  0  0  0  0\n  sa kaeo                  0 0 1 0 0 0 0 0  0  0  0  0\n  sakon nakhon             0 0 1 0 0 0 0 0  0  0  0  0\n  samut prakan             0 0 0 0 0 0 0 0  1  0  0  0\n  samut sakhon             0 0 0 0 0 0 0 1  0  0  0  0\n  samut songkhram          0 0 0 0 0 0 1 0  0  0  0  0\n  saraburi                 0 0 0 0 0 0 1 0  0  0  0  0\n  satun                    0 0 1 0 0 0 0 0  0  0  0  0\n  si sa ket                0 1 0 0 0 0 0 0  0  0  0  0\n  sing buri                0 0 0 0 0 0 0 1  0  0  0  0\n  songkhla                 0 0 1 0 0 0 0 0  0  0  0  0\n  sukhothai                0 0 0 1 0 0 0 0  0  0  0  0\n  suphan buri              0 0 0 0 0 0 0 1  0  0  0  0\n  surat thani              0 0 0 1 0 0 0 0  0  0  0  0\n  surin                    0 1 0 0 0 0 0 0  0  0  0  0\n  tak                      1 0 0 0 0 0 0 0  0  0  0  0\n  trang                    0 0 0 1 0 0 0 0  0  0  0  0\n  trat                     1 0 0 0 0 0 0 0  0  0  0  0\n  ubon ratchathani         0 1 0 0 0 0 0 0  0  0  0  0\n  udon thani               0 0 1 0 0 0 0 0  0  0  0  0\n  uthai thani              0 0 0 0 0 1 0 0  0  0  0  0\n  uttaradit                0 0 1 0 0 0 0 0  0  0  0  0\n  yala                     0 1 0 0 0 0 0 0  0  0  0  0\n  yasothon                 0 0 1 0 0 0 0 0  0  0  0  0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp <- n.comp.nb(wm_d111000)\nn_comp$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n-   This shows that there are 2 different clusters, meaning that some regions are connected to each other, while others are not, leading to two distinct groups. Below shows that the first cluster contains 61 regions, while the second cluster contains 14 regions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n_comp$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1  2 \n61 14 \n```\n\n\n:::\n:::\n\n\n#### Plotting fixed distance weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx_limits <- c(min(longitude) - 1000, max(longitude) + 1000)  # Adjust these values as needed\ny_limits <- c(min(latitude) - 1000, max(latitude) + 1000)   # Adjust these values as needed\n\n# Plot the boundary and neighborhood structures with adjusted limits\nplot(thailand$geometry, border=\"lightgrey\", xlim = x_limits, ylim = y_limits)\nplot(wm_d111000, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex02_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n-   Plot 1st nearest neighbours (red lines) vs Distance link of neighbours within the cut-off distance of 111000 meters (black lines)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(thailand$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(thailand$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d111000, coords, add=TRUE, pch = 19, cex = 0.6)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex02_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n### 6.2.2 Adaptive Distance\n\n#### Computing Adaptive Distance Weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 75 \nNumber of nonzero links: 450 \nPercentage nonzero weights: 8 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 75\n $ : int [1:6] 2 3 4 5 57 58\n $ : int [1:6] 1 3 4 10 57 58\n $ : int [1:6] 1 2 4 5 57 58\n $ : int [1:6] 1 2 3 5 16 57\n $ : int [1:6] 1 3 4 6 9 57\n $ : int [1:6] 4 5 7 8 9 56\n $ : int [1:6] 5 6 8 9 46 56\n $ : int [1:6] 5 6 7 46 47 56\n $ : int [1:6] 4 5 6 7 15 16\n $ : int [1:6] 1 2 11 12 14 15\n $ : int [1:6] 1 2 10 12 13 14\n $ : int [1:6] 10 11 13 14 15 17\n $ : int [1:6] 10 11 12 14 15 17\n $ : int [1:6] 1 2 10 11 15 16\n $ : int [1:6] 4 9 10 14 16 17\n $ : int [1:6] 1 4 5 9 14 15\n $ : int [1:6] 12 14 15 16 18 19\n $ : int [1:6] 9 15 16 17 19 24\n $ : int [1:6] 17 18 20 21 31 32\n $ : int [1:6] 19 21 22 23 31 32\n $ : int [1:6] 19 20 22 23 25 32\n $ : int [1:6] 20 21 23 25 32 36\n $ : int [1:6] 21 22 25 32 33 36\n $ : int [1:6] 18 26 27 29 31 53\n $ : int [1:6] 21 22 23 32 33 36\n $ : int [1:6] 24 27 28 29 30 33\n $ : int [1:6] 24 26 28 31 32 33\n $ : int [1:6] 26 27 29 30 33 34\n $ : int [1:6] 26 28 30 40 51 53\n $ : int [1:6] 26 27 28 29 33 34\n $ : int [1:6] 19 20 23 27 32 33\n $ : int [1:6] 20 23 25 31 33 36\n $ : int [1:6] 23 27 31 32 34 36\n $ : int [1:6] 28 30 32 33 35 36\n $ : int [1:6] 23 25 28 33 34 36\n $ : int [1:6] 23 25 32 33 34 35\n $ : int [1:6] 38 39 41 43 44 45\n $ : int [1:6] 37 39 41 45 49 50\n $ : int [1:6] 37 38 40 41 43 50\n $ : int [1:6] 29 39 41 42 50 51\n $ : int [1:6] 38 39 40 42 43 50\n $ : int [1:6] 29 39 40 41 43 44\n $ : int [1:6] 37 39 40 41 42 44\n $ : int [1:6] 37 38 39 41 42 43\n $ : int [1:6] 37 38 39 41 43 44\n $ : int [1:6] 6 7 8 47 48 52\n $ : int [1:6] 7 8 46 48 55 56\n $ : int [1:6] 46 47 49 50 51 52\n $ : int [1:6] 38 46 47 48 50 52\n $ : int [1:6] 39 40 41 48 49 51\n $ : int [1:6] 29 40 48 50 52 53\n $ : int [1:6] 8 46 48 50 51 53\n $ : int [1:6] 24 27 29 46 51 52\n $ : int [1:6] 1 3 57 58 59 60\n $ : int [1:6] 6 8 47 54 56 57\n $ : int [1:6] 5 6 7 8 55 57\n $ : int [1:6] 1 3 4 5 58 59\n $ : int [1:6] 1 2 3 54 57 59\n $ : int [1:6] 1 3 54 57 58 60\n $ : int [1:6] 3 54 57 58 59 61\n $ : int [1:6] 2 54 58 59 60 68\n $ : int [1:6] 63 64 65 66 71 72\n $ : int [1:6] 62 64 65 66 71 72\n $ : int [1:6] 62 63 65 66 67 71\n $ : int [1:6] 62 63 64 66 71 72\n $ : int [1:6] 62 63 64 65 67 68\n $ : int [1:6] 62 63 64 65 66 68\n $ : int [1:6] 61 62 63 64 66 67\n $ : int [1:6] 70 71 72 73 74 75\n $ : int [1:6] 62 69 71 72 73 74\n $ : int [1:6] 62 63 65 69 70 72\n $ : int [1:6] 62 63 69 70 71 73\n $ : int [1:6] 69 70 71 72 74 75\n $ : int [1:6] 69 70 71 72 73 75\n $ : int [1:6] 69 70 71 72 73 74\n - attr(*, \"region.id\")= chr [1:75] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"ncomp\")=List of 2\n  ..$ nc     : int 1\n  ..$ comp.id: int [1:75] 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(thailand$ADM1_EN, card(knn6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                          \n                           6\n  amnat charoen            1\n  ang thong                1\n  bangkok                  1\n  buri ram                 1\n  chachoengsao             1\n  chai nat                 1\n  chaiyaphum               1\n  chanthaburi              1\n  chiang mai               1\n  chiang rai               1\n  chon buri                1\n  chumphon                 1\n  kalasin                  1\n  kamphaeng phet           1\n  kanchanaburi             1\n  khon kaen                1\n  krabi                    1\n  lampang                  1\n  lamphun                  1\n  loei                     1\n  mae hong son             1\n  maha sarakham            1\n  mukdahan                 1\n  nakhon nayok             1\n  nakhon pathom            1\n  nakhon phanom            1\n  nakhon ratchasima        1\n  nakhon sawan             1\n  nakhon si thammarat      1\n  nan                      1\n  narathiwat               1\n  nong bua lam phu         1\n  nong khai                1\n  nonthaburi               1\n  pathum thani             1\n  pattani                  1\n  phangnga                 1\n  phatthalung              1\n  phayao                   1\n  phetchabun               1\n  phetchaburi              1\n  phichit                  1\n  phitsanulok              1\n  phra nakhon si ayutthaya 1\n  phrae                    1\n  phuket                   1\n  prachin buri             1\n  prachuap khiri khan      1\n  ranong                   1\n  ratchaburi               1\n  rayong                   1\n  roi et                   1\n  sa kaeo                  1\n  sakon nakhon             1\n  samut prakan             1\n  samut sakhon             1\n  samut songkhram          1\n  saraburi                 1\n  satun                    1\n  si sa ket                1\n  sing buri                1\n  songkhla                 1\n  sukhothai                1\n  suphan buri              1\n  surat thani              1\n  surin                    1\n  tak                      1\n  trang                    1\n  trat                     1\n  ubon ratchathani         1\n  udon thani               1\n  uthai thani              1\n  uttaradit                1\n  yala                     1\n  yasothon                 1\n```\n\n\n:::\n:::\n\n\n#### Plotting adaptive distance weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(thailand$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](take-home_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n### 6.2.3 Global Moran I: Access Spatial Autocorrelation using Adaptive Distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsknn6 <- nb2listw(knn6, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrsknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 75 \nNumber of nonzero links: 450 \nPercentage nonzero weights: 8 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 75 5625 75 22.27778 311.6667\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthailand_total_cases <- thailand %>%\n  mutate(total_cases = no_cases_2017 + no_cases_2018 + \n                     no_cases_2019 + no_cases_2020 + \n                     no_cases_2021 + no_cases_2022)\n```\n:::\n\n\n#### 1. Moran's I Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(thailand_total_cases$total_cases, \n           listw=rsknn6, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  thailand_total_cases$total_cases  \nweights: rsknn6    \n\nMoran I statistic standard deviate = 1.4928, p-value = 0.06774\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.07005720       -0.01351351        0.00313397 \n```\n\n\n:::\n:::\n\n\n#### 2. .Computing Monte Carlo Moran's I\n\n-   set a seed of 1234\n\n-   number of simulations = 1000\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm_moran= moran.mc(thailand_total_cases$total_cases, \n                listw=rsknn6, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_moran\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  thailand_total_cases$total_cases \nweights: rsknn6  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.070057, observed rank = 909, p-value = 0.091\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n-   moran I statistic: 0.070057 \\> 0 show signs of clustering\n\n-   p-value = 0.091 \\> 0.05, 95% confident to accept null hypothesis (h0)\n\n#### 3. Visualising Monte Carlo Moran's I\n\n-   Computing some basic statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#compute mean\nmean(bperm_moran$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01000913\n```\n\n\n:::\n\n```{.r .cell-code}\ncat('\\n')\n```\n\n```{.r .cell-code}\n#compute variance\nvar(bperm_moran$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.00319814\n```\n\n\n:::\n\n```{.r .cell-code}\ncat('\\n')\n```\n\n```{.r .cell-code}\n#summary bperm\nsummary(bperm_moran$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.15423 -0.05047 -0.01599 -0.01001  0.02541  0.22929 \n```\n\n\n:::\n:::\n\n\n-   plotting histogram using ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(simulated_morans_i = bperm_moran$res[1:999])\n\nggplot(data, aes(x = simulated_morans_i)) +\n  geom_histogram(binwidth = (max(data$simulated_morans_i) - min(data$simulated_morans_i)) / 20, \n                 color = \"black\", fill = \"pink\") +  # Histogram\n  geom_vline(xintercept = 0, color = \"red\", linetype = \"solid\") +  # Vertical line at x=0\n  labs(x = \"Simulated Moran's I\", y = \"Frequency\") +  # Labels for x and y axis\n  theme_minimal()  # Clean minimal theme\n```\n\n::: {.cell-output-display}\n![](take-home_Ex02_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n### 6.3 Spatial Correlogram\n\n#### Compute Moran's I Spatial Correlogram\n\nIn the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a [**6-lag**]{.underline} spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The **plot()** of base Graph is then used to plot the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_corr <- sp.correlogram(knn6,                            \n                          thailand_total_cases$total_cases,\n                          order=6,  #lag-value: 6                           \n                          method=\"I\",                            \n                          style=\"W\",\n                          zero.policy = TRUE) \n\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex02_files/figure-html/unnamed-chunk-53-1.png){width=672}\n:::\n:::\n\n\n-   Looking at the first lag, it is positive, showing signs of clustering. This suggests that the the key indicators of drug abuse of Thailand have positive spatial dependence. The following lags after shows negative Moran I, showing signs of regular patterns amongst 2nd order neighbours and below.\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for thailand_total_cases$total_cases \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided  \n1 (75)  0.0700572  -0.0135135  0.0031340           1.4928         0.13548  \n2 (75) -0.0540624  -0.0135135  0.0023706          -0.8328         0.40494  \n3 (75) -0.0060335  -0.0135135  0.0022208           0.1587         0.87388  \n4 (75) -0.0500771  -0.0135135  0.0020147          -0.8146         0.41530  \n5 (75)  0.0242813  -0.0135135  0.0019363           0.8589         0.39039  \n6 (75) -0.1007630  -0.0135135  0.0019960          -1.9529         0.05083 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## 7.0 Local Measures of Spatial Autocorrelation\n\n------------------------------------------------------------------------\n\n## 9.0 Conclusion\n\n------------------------------------------------------------------------\n\n## References\n",
    "supporting": [
      "take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}