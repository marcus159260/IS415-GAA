---
title: "Hands-on-Exercise 3: 1st Order Spatial Point Patterns Analysis"
author: "Marcus Jaeson Yeo"
date: "August 31, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---


### About

-   **1st Order Spatial Point Patterns Analysis Methods**
    -   It is about the distribution of points and point patters in a geographic boundary.

### Some interesting questions:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

## Installing and Loading R packages

-   sf

-   spatstat

-   raster

-   maptools

-   tmap


```{r}
pacman::p_load(sf, spatstat, raster, tmap, tidyverse, maptools)
```


------------------------------------------------------------------------

## Importing Datasets

-   CHILDCARE (and projection transform)


    ```{r}
    childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
      st_transform(crs = 3414)
    ```


-   MP14_SUBZONE_WEB_PL (and projection transform)


    ```{r}
    mpsz_sf <- st_read(dsn = "data", 
                    layer = "MP14_SUBZONE_WEB_PL") %>% 
      st_transform(crs=3414)
    ```


-   CostalOutline (and projection transform)


    ```{r}
    sg_sf <- st_read(dsn = "data", layer="CostalOutline")%>% 
      st_transform(crs=3414)
    ```


## Projection Transformation

-   make sure all sf are in the same projection system

-   check crs of each sf and compare


```{r}
st_crs(childcare_sf) #EPSG 3414
st_crs(mpsz_sf) #EPSG 9001 -> 3414
st_crs(sg_sf) #EPSG 9001 -> 3414
```


------------------------------------------------------------------------

## Plotting

-   order matters! if the other way around (childcare come first), will not work.

-   childcare_sf consist of spatial points, so it cannot use tm_polygons/tm_fill/tm_borders, must use tm_dots instead.

-   tmap: plot mode


```{r}
# tmap_mode('plot')

# order matters!!, if the other way around, wont work
tm_shape(sg_sf) + 
  tm_polygons() + 
  tm_shape(mpsz_sf) + 
  tm_polygons()+ 
  tm_shape(childcare_sf)+ 
  tm_dots()
```


-   pin map (tmap mode: interactive viewing)

    -   uses [leaflet for R]{.underline} api. Allows for navigating and zooming around the map freely. Hover and click to get information for each dot point.


    ```{r}
    tmap_mode('view')
    tm_shape(childcare_sf)+
      tm_dots()
    ```


------------------------------------------------------------------------

## Data Wrangling

### **- Converting sf data frames to sp’s Spatial\* class**


```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)

```


-   check spatial conversion


```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```


**Converting the Spatial\* class into generic sp format**

-   we have the spatial class, but we need to create the spatial object (generic sp format) from the class, as spatstat needs it in ppp object form.


    ```{r}
    childcare_sp <- as(childcare, "SpatialPoints")
    sg_sp <- as(sg, "SpatialPolygons")
    ```


-   check spatial objects


    ```{r}
    childcare_sp
    ```

    ```{r}
    sg_sp
    ```


**Converting the generic sp format to ppp object format ( as.ppp() )**


```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```


-   plot childcare_ppp and observe


    ```{r}
    plot(childcare_ppp)
    ```

    ```{r}
    summary(childcare_ppp)
    ```


-   check duplicates


    ```{r}
    any(duplicated(childcare_ppp))
    ```


    -   count the points that are duplicated (multiplicity)


    ```{r}
    multiplicity(childcare_ppp)
    ```


    -   sum up all the points that are duplicated


    ```{r}
        sum(multiplicity(childcare_ppp) > 1)
    ```


    -   how to spot duplicate points? 3 ways

        -   delete duplicates

            -   disadvantage: useful point events will be lost

        -   jittering

            -   slightly shift duplicate points/add a small pertubation to the duplicate points so that they do not occupy the exact same space, to make them unique


    ```{r}
            childcare_ppp_jit <- rjitter(childcare_ppp, 
                                         retry=TRUE, 
                                         nsim=1, 
                                         drop=TRUE)
            
            any(duplicated(childcare_ppp_jit))
          
    ```


    ```         
    -   owin

        -   is a [**geographical boundary**]{.underline} to confine our analysis

        -   to represent this polygonal region, need to create owin object
    ```


    ```{r}
        sg_owin <- as.owin(sg_sf)

        plot(sg_owin)
    ```

    ```{r}
        summary(sg_owin)
    ```


    ```         
    -   extracting events to our owin boundary

        -   couple the polygon with the events within it in one entity
    ```


    ```{r}
        childcareSG_ppp = childcare_ppp[sg_owin]
        head(childcareSG_ppp)

    ```

    ```{r}
      plot(childcareSG_ppp)
    ```


    ```         
    -   make each points unique, then attach duplicates of the points to the patterns as marks (attribute of the points)
    ```

------------------------------------------------------------------------

## **First-order Spatial Point Patterns Analysis (SPPA)**

Focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

### Kernel Density Estimation (KDE)

-   smoothing kernels

    -   default: gaussian

    -   epanechnikov

    -   quartic

    -   disc

-   automatic bandwidth methods

    -   bw.diggle()

    -   Other recommended methods are [*bw.CvL()*](https://rdrr.io/cran/spatstat/man/bw.CvL.html), [*bw.scott()*](https://rdrr.io/cran/spatstat/man/bw.scott.html) or [*bw.ppl()*](https://rdrr.io/cran/spatstat/man/bw.ppl.html).

#### - Compute kernel density (childcare)


```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
```

```{r}
plot(kde_childcareSG_bw)
```


-   density values **(number of points per square meter)** of the output range is too low and difficult to interpret. This is because the default unit of measurement of SVY21 is meters.

#### - retrieve bandwidth


```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```


### Rescale KDE values

Since density values too low, need to rescale: change from meters to kilometers


```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```


### Working with other automatic bandwidth methods

-   *bw.diggle()*


    ```{r}
    bw.diggle(childcareSG_ppp.km)
    ```


-   *bw.CvL()*


    ```{r}
     bw.CvL(childcareSG_ppp.km)
    ```


-   *bw.scott()*


    ```{r}
    bw.scott(childcareSG_ppp.km)
    ```


-   *bw.ppl()*


    ```{r}
    bw.ppl(childcareSG_ppp.km)
    ```


-   Comparing between ***diggle*** and ***ppl***


    ```{r}
    kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                                   sigma=bw.ppl, 
                                   edge=TRUE,
                                   kernel="gaussian")
    par(mfrow=c(1,2))
    plot(kde_childcareSG.bw, main = "bw.diggle")
    plot(kde_childcareSG.ppl, main = "bw.ppl")
    ```


### Working with other different kernel methods

-   gaussian (default)

-   epanechnikov

-   quartic

-   disc


```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```


------------------------------------------------------------------------

# Fixed and Adaptive KDE

### Computing KDE by using Fixed Bandwith

-   sigma = 0.6 (0.6km -\> 600m)


```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```


### Computing KDE by using Adaptive Bandwith

-   using Fixed Bandwidth method is very sensitive to highly skewed distributions of spatial points. So by using Adaptive Bandwidth, will solve this issue


    ```{r}
    kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
    plot(kde_childcareSG_adaptive)
    ```


Compare between Fixed Bandwidth and Adaptive Bandwidth


```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```


### Converting KDE output into grid object


```{r}
# #gridded kernal density object
# if dont have maptools, this doesnt work
gridded_kde_childcareSG_bw <- maptools::as.SpatialGridDataFrame.im(kde_childcareSG.bw)
spplot(gridded_kde_childcareSG_bw)
```


-   converting gridded output into raster


    ```{r}
    kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
    ```

    ```{r}
    kde_childcareSG_bw_raster
    ```


    -   notice the crs property is 'NA'. so we need to assign the correct projection system to it (EPSG: 3414).

### Assigning Projection Systems


```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```


### Visualising the output in tmap

-   display **cartographic quality map**


    ```{r}
    tmap_mode('view')
    tm_shape(kde_childcareSG_bw_raster) + 
      tm_raster("layer", palette = "viridis") +
      tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
    ```


### Comparing Spatial Points Patters using KDE

-   Extract Study Areas to compare KDE of childcare in Punggol, Tampines, Chua Chu Kang, Jurong West planning areas


    ```{r}
    pg = mpsz_sf[mpsz@data$PLN_AREA_N == "PUNGGOL",]
    tm = mpsz_sf[mpsz@data$PLN_AREA_N == "TAMPINES",]
    ck = mpsz_sf[mpsz@data$PLN_AREA_N == "CHOA CHU KANG",]
    jw = mpsz_sf[mpsz@data$PLN_AREA_N == "JURONG WEST",]
    ```

    ```{r}
    par(mfrow=c(2,2))
    plot(pg, main = "Punggol")

    ```

    ```{r}
    plot(tm, main = "Tampines")

    ```

    ```{r}
    plot(ck, main = "Choa Chu Kang")

    ```

    ```{r}
    plot(jw, main = "Jurong West")
    ```


### Creating ***owin*** object

-   convert sf objects to owin objects


    ```{r}
    pg_owin = as.owin(pg)
    tm_owin = as.owin(tm)
    ck_owin = as.owin(ck)
    jw_owin = as.owin(jw)

    ```


    ### Combining childcare points and study areas (extract childcare areas)


```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```


### Rescale


```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```


### Plot


```{r}
# Reset layout to a single plot per page
par(mfrow=c(1, 1)) 

# Increase the margin around the plot to fit the labels
par(mar=c(5, 5, 4, 2) + 0.1) 

# Plot the maps with larger margins for better visibility
plot(childcare_pg_ppp.km, main="Punggol", cex.main=2) # Increase title size
plot(childcare_tm_ppp.km, main="Tampines", cex.main=2)
plot(childcare_ck_ppp.km, main="Choa Chu Kang", cex.main=2)
plot(childcare_jw_ppp.km, main="Jurong West", cex.main=2)
```


### Computing KDE of the 4 areas (Automatic Bandwidth (sigma = bw.diggle))


```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```


### Computing fixed bandwidth KDE of the 4 areas (Fixed Bandwidth (sigma = 0.25))

-   will use 250m as the bandwidth


    ```{r}
    par(mfrow=c(2,2))
    plot(density(childcare_ck_ppp.km, 
                 sigma=0.25, 
                 edge=TRUE, 
                 kernel="gaussian"),
         main="Chou Chu Kang")
    plot(density(childcare_jw_ppp.km, 
                 sigma=0.25, 
                 edge=TRUE, 
                 kernel="gaussian"),
         main="JUrong West")
    plot(density(childcare_pg_ppp.km, 
                 sigma=0.25, 
                 edge=TRUE, 
                 kernel="gaussian"),
         main="Punggol")
    plot(density(childcare_tm_ppp.km, 
                 sigma=0.25, 
                 edge=TRUE, 
                 kernel="gaussian"),
         main="Tampines")
    ```


------------------------------------------------------------------------

## Nearest Neighbour Analysis

-   Clark-Evans test of aggregation

-   Test Hypotheses

    -   Ho = The distribution of childcare services are randomly distributed.

    -   H1= The distribution of childcare services are not randomly distributed.

        95% confidence interval will be used.

### **Testing spatial point patterns using Clark and Evans Test**


```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)

```


-   What can we tell from the result?

    -   R-value indicates clustering. P-value shows that it is a statistically significant result.

### **Clark and Evans Test: Choa Chu Kang planning area**


```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```


-   P-value indicates that we cannot reject the null hypothesis.

### **Clark and Evans Test: Tampines planning area**


```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```


-   R-value result indicates clustering and the P-value tells us that this is a statistically significant result.

