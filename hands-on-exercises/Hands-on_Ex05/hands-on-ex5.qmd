---
title: "Hands-on-Exercise 5: Spatial Weights and Applications"
author: "Marcus Jaeson Yeo"
date: "September 13, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---

## 1.0 Introduction

[Focus on:]{.underline}

-   Tobler’s First law of Geography

-   Principles of Spatial Autocorrelation

-   Concepts of Spatial Proximity and Spatial Weights

    -   Contiguity-Based Spatial Weights: Rook’s & Queen’s

    -   Distance-Band Spatial Weights: fixed and adaptive

-   Applications of Spatial Weights

    -   Spatially Lagged Variables

    -   Geographically Weighted Summary Statistics

------------------------------------------------------------------------

## 2.0 Importing Packages

-   sf: import geospatial data

-   readr: import csv file (**tidyverse** package)

-   dplyr: perform relational join

-   spdep: compute spatial weights, calculate spatially lagged variables

-   tmap: plotting and visualisation

-   knitr:

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

------------------------------------------------------------------------

## 3.0 Importing Datasets into Environment

-   geospatial (boundary data)

    ```{r}
    hunan_sf <- st_read(dsn = "data/geospatial", 
                     layer = "Hunan")
    ```

-   aspatial

    ```{r}
    hunan2012_sf <- read_csv("data/aspatial/Hunan_2012.csv")
    hunan2012_sf
    ```

------------------------------------------------------------------------

## 4.0 Projection Transformation

```{r}
st_crs(hunan_sf)

```

```{r}
st_crs(hunan2012_sf)
```

------------------------------------------------------------------------

## 5.0 Data Wrangling

-   Perform Relational Join

    -   left_join (from dplyr package) to join by same column (County)

```{r}
hunan <- left_join(hunan_sf, hunan2012_sf, join_by(County)) %>%
  select(1:4, 7, 15)

#how do i know to pick column 15? if i were to pick 8 (last column), there will be:
  #Error: Fill argument neither colors nor valid variable name(s)

#pick 6 columns (1:4, 7, 15) gives back 7 columns? (GDPPC)
```

------------------------------------------------------------------------

## 6.0 Exploratory Spatial Data Analysis

-   Visualising Regional Development Indicator

    -   through **basemap** and **choropleth map** , to show distribution of GDPPC 2012 by using [qtm() of tmap]{.underline} package.

```{r}

basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.4)

gdppc <- qtm(hunan, "GDPPC", fill.palette = "plasma")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

------------------------------------------------------------------------

## 7.0 Computing Contiguity Spatial Weights

-   use [poly2nb (from spdep package)]{.underline} to compute contiguity weight matrices for the study area

    -   poly2nb accepts arguement (queen), which sets boolean (TRUE or FALSE), identifying neighbouring regions.

    -   default: queen = TRUE, will generate list of [first-order neighbours]{.underline}

    #### 7.1 Computing QUEEN contiguity-based neighbours

    -   weight matrices

```{r}

wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)

```

-   regions = area units

-   (polygon id) 85 is polygon 85 has 11 connected neighbours

-   (polygon id) 30 and 65: has 1 connected regions (the least)

    #### See connected neighbours of first polygon object

    -   Polygon 1 has [5]{.underline} neighbours

    ```{r}
    wm_q[[1]]
    ```

    -   County name of Polygon 1

    ```{r}
    hunan$County[1]
    ```

    -   County names of connected neighbours of Polygon 1

    ```{r}
    hunan$NAME_3[wm_q[[1]]]

    #or just copy the column numbers from above

    # hunan$NAME_3[c(2,3,4,57,85)]
    ```

    -   GDPCC of the 5 neighbours

    ```{r}
    GDPCC_poly1 = hunan$GDPPC[wm_q[[1]]]
    GDPCC_poly1
    ```

    -   display [**complete weight matrix**]{.underline}, using str() function

        -   to see the connected neighbours of all 88 polygons

    ```{r}
    str(wm_q)

    ```

    #### 7.2 Computing ROOK contiguity-based neighbours

    -   use wm_r to create another set of neighbours

    ```{r}
    wm_r <- poly2nb(hunan, queen=FALSE)
    summary(wm_r)
    ```

    #### 7.3 Visualising Contiguity Weights

    -   longitude

    ```{r}

    longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
    ```

    -   latitude

    ```{r}

    latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
    ```

    -   cbind

        -   extract and bind coordinates of the centroid of each area unit

    ```{r}
    coords <- cbind(longitude, latitude)
    ```

    ```{r}
    head(coords)
    ```

    #### 7.3.1 Plotting **QUEEN contiguity based neighbours map**

    ```{r}
    plot(hunan$geometry, border="lightgrey")
    plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "grey")
    ```

    #### 7.3.2 Plotting **ROOK contiguity based neighbours map**

    ```{r}
    plot(hunan$geometry, border="lightgrey")
    plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "grey")
    ```

    #### 7.3.3 **Plotting QUEEN and ROOK contiguity based neighbours map**

    ```{r}
    par(mar = c(0,0,1,0),mfrow=c(1,2))
    plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
    plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "grey")
    plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
    plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "grey")
    ```

------------------------------------------------------------------------

## 8.0 Computing Distance Based Neighbours

-   Derive distance-based weight matrices using [dnearneigh() from spdep package]{.underline}

-   The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

    #### 8.1 Determine Cut-Off Distance

    We need to determine the [**upper limit for the distance band**]{.underline}:

    -   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

    -   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

    -   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

    -   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

    ```{r}
    #coords <- coordinates(hunan)
    k1 <- knn2nb(knearneigh(coords))
    k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
    summary(k1dists)
    ```

    #### 8.2 Computing Fixed Distance weight matrix

    Compute the [**distance weight matrix**]{.underline} using dnearneigh()

    ```{r}
    wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
    wm_d62
    ```

    ***Quiz:** What is the meaning of “Average number of links: 3.681818” shown above?*

    -   It means within a distance range of **0-62km**, each region has 3-4 (**3.68**) neighboring regions.

    Display the content of wm_62 matrix using str()

    ```{r}
    str(wm_d62)
    ```

    Another way to display the structure of the weight matrix is to combine [*table()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/table) and [*card()*](https://r-spatial.github.io/spdep/reference/card.html) of spdep.

    ```{r}
    table(hunan$County, card(wm_d62))
    ```

    ```{r}
    n_comp <- n.comp.nb(wm_d62)
    n_comp$nc
    ```

    ```{r}
    table(n_comp$comp.id)
    ```

    #### 8.3 Plotting fixed distance weight matrix

    -   Red lines show links of first-nearest neighbours

    -   Black lines show links of neighbours within the cut-off distance range of 62km

    ```{r}
    plot(hunan$geometry, border="lightgrey")
    plot(wm_d62, coords, add=TRUE)
    plot(k1, coords, add=TRUE, col="red", length=0.08)
    ```

    #### 8.3.1 Separate 1st-nearest neighbours (red) and other neighbours within range (black)

    ```{r}
    par(mfrow=c(1,2))
    plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
    plot(k1, coords, add=TRUE, col="red", length=0.08)
    plot(hunan$geometry, border="lightgrey", main="Other neighbours")
    plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
    ```

    ### 8.4 Computing adaptive distance weight matrix

    ```{r}
    knn6 <- knn2nb(knearneigh(coords, k=6))
    knn6

    ```

    ```{r}
    str(knn6)
    ```

    -   Can see that exactly 6 neighbours

    #### 8.5 Plotting 

    ```{r}
    plot(hunan$geometry, border="lightgrey")
    plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
    ```

------------------------------------------------------------------------

## 9.0 **Spatial Weights based on Inverse Distance Weighted (IDW) method**

-   Derive a spatial weight matrix based on Inverse Distance Weighted (IDW) method

    #### 9.1 Compute the distance between areas using [nbdists()]{.underline} of spdep

    ```{r}
    dist <- nbdists(wm_q, coords, longlat = TRUE)
    ids <- lapply(dist, function(x) 1/(x))
    ```

    #### 9.2 Row-standardised weights matrix

    -   We need to assign weights to each neighbouring polygon (assigned equal weight of (style="W")).

    -   This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

    -   other styles:

        -   style="B"

    -   zero.policy = TRUE, allows for lists of non-neighbours. \
        This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

    ```{r}
    rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
    rswm_q
    ```

    See the weight of the first polygon's 8 neighbours type:

    ```{r}
    rswm_q$weights[10]
    ```

    -   So here each neighbour is assigned equal weight of 0.125 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.125 before being tallied.

    Derive a row standardised weight matrix

    ```{r}
    rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
    rswm_ids
    ```

    ```{r}
    rswm_ids$weights[1]
    ```

    ```{r}
    summary(unlist(rswm_ids$weights))
    ```

------------------------------------------------------------------------

## 10.0 **Application of Spatial Weight Matrix**

-   What are spatial lagged variables?

    -   With a neighbor structure defined by the non-zero elements of the spatial weights matrix W, a spatially lagged variable is [**a weighted sum or a weighted average of the neighboring values for that variable**]{.underline}. In most commonly used notation, the spatial lag of y is then expressed as Wy.

```{=html}
<!-- -->
```
-   Explore 4 different spatial lagged variables:

    -   spatial lag with row-standardized weights

    -   spatial lag as a sum of neighbouring values

    -   spatial window average

    -   spatial window sum.

#### 10.1 Spatial lag with row-standardized weights

1.  Compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

    ```{r}
    GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
    GDPPC.lag
    ```

    -   we got the GDPPC of 5 neighbouring regions of the first polygon (Anxiang county)

    ```{r}
    GDPCC_poly1 = hunan$GDPPC[wm_q[[1]]]
    GDPCC_poly1
    ```

2.  We can append the spatially lag GDPPC values onto `hunan` sf data frame through following steps.

    -   First, we will create a variable called `lag.list`

    -   Then, we will calculate the spatial lag value using `lag.listw()` function that takes in the spatial weights matrix `rswm_q`, and the GDPPC values for each region in the **`hunan`** dataframe, **`hunan$GDPPC.`**

    -   Next, we will convert **`lag.list`** into a dataframe named **`lag.res`**

    -   Finally, we will use **`left_join()`** function from the **`dplyr`** package to merge the `hunan` dataframe with `lag.res` dataframe.

    ```{r}
    lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
    lag.res <- as.data.frame(lag.list)
    colnames(lag.res) <- c("NAME_3", "lag GDPPC")
    hunan <- left_join(hunan,lag.res)
    ```

    ```{r}
    head(hunan)
    ```

3.  Plot both the GDPPC and spatial lag GDPPC for comparison 

    ```{r}
    gdppc <- qtm(hunan, "GDPPC", fill.palette = "plasma")
    lag_gdppc <- qtm(hunan, "lag GDPPC",fill.palette = "plasma")
    tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
    ```

#### 10.2 Spatial lag as a sum of neighbouring values

This spatial lag measure do not consider spatial weights, but simply sums up the values of the variable for all the neighbouring regions.

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use `glist` argument in the `nb2listw` function to explicitly assign these weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

1\. With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

2.  Next, we will append the *lag_sum GDPPC* field into hunan sf data frame

```{r}
hunan <- left_join(hunan, lag.res)

```

3.  Plot both the *GDPPC* and *Spatial Lag Sum GDPPC* for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC", fill.palette="plasma")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)

```

#### 10.3 Spatial window average

-   Uses row-standardized weights and includes the diagonal element. 

    -   we need to go back to the neighbors structure and add the diagonal element before assigning weights.

1.  Add the diagonal element to the neighbours list using include.self() from spdep

    ```{r}
    wm_qs <- include.self(wm_q)
    ```

    Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909.

Take a look at the neighbour list of Anxiang county (area\[1\])

```{r}
wm_qs[[1]]
```

Notice that now \[1\] has six neighbours instead of five.

Now we obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

 2. create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

3.  Convert the lag variable listw object into a data.frame by using `as.data.frame()`

    ```{r}
    lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
    lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
    colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
    ```

4.  Append lag_window_avg GDPPC values onto `hunan` data.frame by using `left_join()` of **dplyr** package.

    ```{r}
    hunan <- left_join(hunan, lag_wm_qs.res)
    ```

5.  To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

    ```{r}
    hunan %>%
      select("County", 
             "lag GDPPC", 
             "lag_window_avg GDPPC") %>%
      kable()
    ```

6.  Plot both the `lag_gdppc` and `w_avg_gdppc` maps next to each other for quick comparison.

    ```{r}
    w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC", fill.palette = "plasma")
    tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
    ```

#### 10.4 Spatial window sum

Similar to the spatial window average, this measure [sums up the values of a variable within a specified spatial window]{.underline}. When calculating spatial window sum, we **do not need** to use row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

1.  Assign binary weights to the neighbour structure that includes the diagonal element.

    ```{r}
    b_weights <- lapply(wm_qs, function(x) 0*x + 1)
    b_weights[1]
    ```

2.  Use `nb2listw()` and `glist()` to explicitly assign weight values.

    ```{r}
    b_weights2 <- nb2listw(wm_qs, 
                           glist = b_weights, 
                           style = "B")
    b_weights2
    ```

3.  With our new weight structure, we can compute the lag variable with `lag.listw()` function.

    ```{r}
    w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
    w_sum_gdppc
    ```

4.  Convert the lag variable listw object into a data.frame by using `as.data.frame()`.

    ```{r}
    w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
    colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
    ```

5.  Append w_sum GDPPC values onto `hunan` data.frame by using *left_join()* of **dplyr** package.

    ```{r}
    hunan <- left_join(hunan, w_sum_gdppc.res)
    ```

6.  To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below

    ```{r}
    hunan %>%
      select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
      kable()
    ```

7.  Lastly, `qtm()` of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

    ```{r}
    w_sum_gdppc <- qtm(hunan, "w_sum GDPPC", fill.palette="plasma")
    tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
    ```

------------------------------------------------------------------------
