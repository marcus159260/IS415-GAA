{
  "hash": "4b69231ae1b5accc093ec6f02509177a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 12: Geographically Weighted Predictive Modelling\"\nauthor: \"Marcus Jaeson Yeo\"\ndate: \"November 11, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n### Importing Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)\n```\n:::\n\n\n### Importing Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/rds/mdata.rds\")\n```\n:::\n\n\n### Preparing Data\n\n1.  Data Sampling\n\n    -   Calibrating predictive models are computational intensive, especially random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>%\n  sample_n(1500)\n```\n:::\n\n\n2.  Checking of Overlapping points\n\n-   Check for overlapping point features\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\nsummary(overlapping_points$overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode   FALSE    TRUE \nlogical    1047     453 \n```\n\n\n:::\n:::\n\n\n3.  Spatial Jitter\n\n-   st_jitter of sf package to move\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>%\n  st_jitter(amount = 5)\n\n#move by 5 meters\n```\n:::\n\n\nAfter performing jitter, run the check overlapping code, will remove all the overlap = true\n\n![](images/clipboard-742930981.png){width=\"599\"}\n\n### Data Sampling\n\nEntire data is split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.\n\n-   training: 0.65\n\n-   test: 0.35\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(HDB_sample,\n                              prop = 6.67/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n\n### Multicollinearity check\n\nIn order to avoid multicollinearity. ggcorrmat() of ggstatsplot is used to plot a correlation matrix to check if there are paris of highly correlated independent variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>%\n  st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](in-class_Ex12_files/figure-html/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n### Building a non-spatial multiple linear regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\n```\n:::\n\n\n### Predictive Modelling with [gwr]{.underline}\n\n-   Computing bw\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm + \n                            storey_order + remaining_lease_mths + \n                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          approach=\"CV\",\n                          kernel = \"gaussian\",\n                          adaptive = TRUE,\n                          longlat = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.459032e+12 \nAdaptive bandwidth: 394 CV score: 3.231786e+12 \nAdaptive bandwidth: 250 CV score: 2.914736e+12 \nAdaptive bandwidth: 162 CV score: 2.610897e+12 \nAdaptive bandwidth: 107 CV score: 2.240188e+12 \nAdaptive bandwidth: 73 CV score: 1.971641e+12 \nAdaptive bandwidth: 52 CV score: 1.797271e+12 \nAdaptive bandwidth: 39 CV score: 1.659472e+12 \nAdaptive bandwidth: 31 CV score: 1.573963e+12 \nAdaptive bandwidth: 26 CV score: 1.550147e+12 \nAdaptive bandwidth: 23 CV score: 1.542544e+12 \nAdaptive bandwidth: 21 CV score: 1.518885e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \nAdaptive bandwidth: 19 CV score: 1.515965e+12 \n```\n\n\n:::\n\n```{.r .cell-code}\ngwr_bw_train_ad\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n:::\n\n\nWe see that the **bw** value is 19. But in gwr_ad, we round it to 20.\n\n-   Model calibration\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm + \n                            storey_order + remaining_lease_mths + \n                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw= 20,\n                          kernel = \"gaussian\",\n                          adaptive = TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n-   Model Output\n\n\n::: {.cell}\n\n:::\n\n\n-   Predicting with test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm + \n                            storey_order + remaining_lease_mths + \n                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          predictdata = test_data,\n                          bw= 20,\n                          kernel = \"gaussian\",\n                          adaptive = TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n-   Saving predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_df <- as.data.frame(\n  gwr_pred$SDF$prediction) %>%\n  rename(gwr_pred = \"gwr_pred$SDF$prediction\")\n```\n:::\n\n\n### Predictive Modelling with RF method\n\n-   Data Preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>%\n  st_drop_geometry()\n```\n:::\n\n\n-   Calibrating RF model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + \n                  storey_order + remaining_lease_mths + \n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                  WITHIN_1KM_PRISCH,\n                  data=train_data_nogeom)\n```\n:::\n\n\n-   Model Output\n\n-   Preparing the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(\n  test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n-   Predicting with rf\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#pred the rf model using test_data_nogeom data\n\nrf_pred <- predict(rf, \n                   data = test_data_nogeom)\n```\n:::\n\n\n-   Saving the predicted values\n\n    -   The output of predict() of ranger is object of class ranger with elements. Code chunk is used to extract values from predictions of predicted classes and save the values in a data frame called rf_pred_df.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n\n### Predictive Modelling with SpatialML\n\n-   Calibrating with grf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm + \n                  storey_order + remaining_lease_mths + \n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                  WITHIN_1KM_PRISCH,\n                  dframe=train_data_nogeom,\n                  bw=20,\n                  kernel = \"adaptive\",\n                  coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nNumber of Observations: 1000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNumber of Independent Variables: 14\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nKernel: Adaptive\nNeightbours: 20\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Global ML Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2056587170 \nR squared (OOB):                  0.8568804 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nImportance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm             storey_order     remaining_lease_mths \n            6.932661e+11             1.471090e+12             2.512971e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.695331e+12             5.430899e+11             6.061641e+11 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            8.355142e+11             5.612980e+11             4.449032e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            3.698543e+11             1.287529e+11             2.290324e+11 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            2.310307e+11             7.644464e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean Square Error (Not OOB): 398120142.153\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (Not OOB) %: 97.227\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (Not OOB): 19832.264\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (Not OOB): 19832.752\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Local Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals OOB:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-290000.0  -23542.0     301.7   -1419.2   20628.4  275662.5 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals Predicted (Not OOB):\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-39811.32  -2890.27      0.25     41.71   2914.50  45363.69 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nLocal Variable Importance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                               Min          Max        Mean         StD\nfloor_area_sqm                   0  93554808148  6579446660 12070756152\nstorey_order              40825679 175066741478  6798143080 17439613620\nremaining_lease_mths     147176404 132323223994 17003264291 27856556164\nPROX_CBD                  98672979  86998930774  7795275977 12420258631\nPROX_ELDERLYCARE         136038143  60602086147  6363805690  9972185105\nPROX_HAWKER               89375590  76470252974  5959960036 10069973920\nPROX_MRT                 141134469 116981909991  7311127365 14402287905\nPROX_PARK                173527329  91563243055  6282954230 12004019497\nPROX_MALL                136045951 111744007681  8082912771 14856365039\nPROX_SUPERMARKET         117381309  67560243432  5118831575  8420630833\nWITHIN_350M_KINDERGARTEN         0  43638703821  1704409355  3939462279\nWITHIN_350M_CHILDCARE     24644933 114970847915  4291790153 10498357427\nWITHIN_350M_BUS           45643896  81035956654  3244648284  6333435620\nWITHIN_1KM_PRISCH                0  29773426249  1919719438  3594705849\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean squared error (OOB): 2776322474.986\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (OOB) %: 80.66\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (OOB): 21774.393\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (OOB): 21774.881\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMean squared error Predicted (Not OOB): 56975707.952\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared Predicted (Not OOB) %: 99.603\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC Predicted (Not OOB): 17888.136\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc Predicted (Not OOB): 17888.623\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCalculation time (in seconds): 19.5544\n```\n\n\n:::\n:::\n\n\n-    Predicting with the test data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad,\n                        test_data_nogeom,\n                        x.var.name=\"X\",\n                        y.var.name = \"Y\",\n                        local.w = 1,\n                        global.w=8)\n```\n:::\n\n\n-   Save the predicted values\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n\n### Model Comparison\n\n-   Combining model's output\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>%\n  select(resale_price) %>%\n  cbind(gwr_pred_df) %>%\n  cbind(rf_pred_df) %>%\n  cbind(grf_pred_df)\n```\n:::\n\n\n-   Transposing data\n\n    -   in test_data_pred,\n\n        -   drop geometry column first\n\n        -   those columns ending with \\_pred, will combine all 3 columns to one column (called model) and its values to another column (called predicted), from 500 rows -\\> 1500 rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>%\n  st_drop_geometry() %>%\n  pivot_longer(cols = ends_with(\"pred\"),\n               names_to = \"model\",\n               values_to = \"predicted\")\n```\n:::\n\n\n-   Renaming\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_labels <- c(\n  gwr_pred = \"gwr\",\n  rf_pred = \"Random Forest\",\n  grf_pred = \"gwRF\")\n\ntest_longer <- test_longer %>%\n  mutate(model = recode(model, !!!model_labels))\n```\n:::\n\n\n-   Computing RMSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse_results <- test_longer %>%\n  group_by(model) %>%\n  rmse(truth = resale_price, \n       estimate = predicted) %>%\n  rename(rmse = .estimate) %>%\n  select(model, rmse)\n```\n:::\n\n\n### Model Comparison Plots\n\n-   Bar chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(rmse_results,\n       aes(x = reorder(model, rmse),\n           y=rmse,\n           fill = \"skyblue\")) + \n  geom_bar(stat = \"identity\", \n           fill = \"skyblue\",\n           color = \"black\",\n           width = 0.7) + \n  labs(title = \"RMSE Comparison of Model\",\n       y = \"RMSE\",\n       x = \"Model\") + \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](in-class_Ex12_files/figure-html/unnamed-chunk-27-1.png){width=960}\n:::\n:::\n\n\n-   Scatter Plots\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_longer %>%\n  left_join(rmse_results,\n            by = \"model\")\n\nggplot(data = test_longer,\n       aes(x = predicted,\n           y = resale_price)) + \n  facet_wrap(~ model) + \n  geom_point() + \n  geom_text(data = test_longer,\n            aes(x = Inf, y = Inf,\n                label = paste(\"RMSE: \", round(rmse,2))),\n            hjust = 1.1, vjust = 1.1,\n            color = \"black\", size = 4)\n```\n\n::: {.cell-output-display}\n![](in-class_Ex12_files/figure-html/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n### Variable Importance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(\n  Variable = names(grf_ad$Global.Model$variable.importance),\n  Importance = grf_ad$Global.Model$variable.importance\n)\n```\n:::\n\n\n-   Plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp, aes(x = reorder(Variable, \n                                Importance),\n                    y = Importance)) + \n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\") +\n  coord_flip() + \n  labs(\n    title = \"Variable Importance from Ranger Model\",\n    x = \"Variables\",\n    y = \"Importance\"\n  )\n```\n\n::: {.cell-output-display}\n![](in-class_Ex12_files/figure-html/unnamed-chunk-30-1.png){width=960}\n:::\n\n```{.r .cell-code}\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      : NULL\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n",
    "supporting": [
      "in-class_Ex12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}