{
  "hash": "2de4bc96027b2cf96b5cfef619c4a808",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application\"\nauthor: \"Marcus Jaeson Yeo\"\ndate: \"October 27, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 1.0 Overview\n\n### 1.1 Objectives\n\n-   To evaluate and determine the necessary R packages needed for your Shiny application are supported in R CRAN,\n\n-   To prepare and test the specific R codes can be run and returned the correct output as expected,\n\n-   To determine the parameters and outputs that will be exposed on the Shiny applications, and\n\n-   To select the appropriate Shiny UI components for exposing the parameters determine above.\n\n### 1.2 Focus\n\nThe focus within this Take-Home Exercise, as part of the group project, would be our geographical and aspatial target on:\n\n-   districts within East Malaysia (Sabah, Sarawak, W.P Labuan)\n\n-   category: assault\n\n-   type: rape\n\nWe will be discovering the **rape** trends that take place within the **districts** of **East Malaysia**, across the years **2020-2023**, discovering the emerging hot spots and cold spots, outliers, as well as determine the spatial autocorrelation within these districts.\n\n### 1.3 Prototyping for Shiny Application\n\n## 2.0 Load packages\n\n-   sf\n\n-   tmap\n\n-   tidyverse\n\n-   spdep\n\n-   sfdep\n\n-   dplyr\n\n-   tidyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, spdep, sfdep, dplyr, tidyr)\n```\n:::\n\n\n## 3.0 Importing Data and Data Wrangling\n\n### 3.1 Raw Data\n\n-   geospatial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_adm2 <- st_read(dsn = 'data/geospatial/', layer = 'mys_admbnda_adm2_unhcr_20210211')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mys_admbnda_adm2_unhcr_20210211' from data source \n  `C:\\marcus159260\\IS415-GAA\\take-home_exercises\\take-home_ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 144 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 99.64072 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# msia_adm2_shp <- st_read(dsn = 'data/geospatial/mys_admbnda_adm1_unhcr_20210211.shp')\n```\n:::\n\n\n-   aspatial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf <- read_csv('data/aspatial/crime_district.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 19152 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): state, district, category, type\ndbl  (1): crimes\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### 3.2 Geospatial Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(msia_adm2[\"ADM2_EN\"])\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nUpon plotting out the shapefile of Admin level 2, we can see that it takes both East and West Malaysia. However, we only want East Malaysia (Sabah, Sarawak).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_adm2$ADM1_EN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Johor\"             \"Kedah\"             \"Kelantan\"         \n [4] \"W.P. Kuala Lumpur\" \"W.P. Labuan\"       \"Melaka\"           \n [7] \"Negeri Sembilan\"   \"Pahang\"            \"Perak\"            \n[10] \"Perlis\"            \"Pulau Pinang\"      \"Sabah\"            \n[13] \"Sarawak\"           \"Terengganu\"        \"W.P. Putrajaya\"   \n[16] \"Selangor\"         \n```\n\n\n:::\n:::\n\n\nWe will convert all to lowercase and do necessary trimming for appropriate left-join later to combine with our working data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_adm2 <- msia_adm2 %>%\n  mutate(ADM1_EN = str_to_lower(ADM1_EN),  \n         ADM1_EN = str_trim(ADM1_EN)) %>%\n  mutate(ADM2_EN = str_to_lower(ADM2_EN),  \n       ADM2_EN = str_trim(ADM2_EN)) \n```\n:::\n\n\nNow, we separate East Malaysia, only filtering \"sabah\", \"sarawak\", \"w.p. labuan\" regions. We will select only the necessary columns: ADM1_EN, ADM2_EN, geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_adm2_east <- msia_adm2 %>%\n  filter(ADM1_EN %in% c(\"sabah\", \"sarawak\", \"w.p. labuan\")) %>%\n  select(\"ADM1_EN\", \"ADM2_EN\", \"geometry\")\n\nmsia_adm2_east\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 57 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 109.5379 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\nFirst 10 features:\n       ADM1_EN       ADM2_EN                       geometry\n1  w.p. labuan   w.p. labuan MULTIPOLYGON (((115.2528 5....\n2        sabah      beaufort MULTIPOLYGON (((115.58 5.21...\n3        sabah       beluran MULTIPOLYGON (((117.7142 6....\n4        sabah      keningau MULTIPOLYGON (((116.0938 4....\n5        sabah  kinabatangan MULTIPOLYGON (((119.2474 5....\n6        sabah    kota belud MULTIPOLYGON (((116.61 6.66...\n7        sabah kota kinabalu MULTIPOLYGON (((116.3009 5....\n8        sabah   kota marudu MULTIPOLYGON (((116.3408 6....\n9        sabah   kuala penyu MULTIPOLYGON (((115.3682 5....\n10       sabah         kudat MULTIPOLYGON (((116.6292 6....\n```\n\n\n:::\n:::\n\n\nNow, when we plot back, we can see that only East Malaysia polygon shapes are filtered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(msia_adm2_east)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n3 states, 57 districts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_adm2_east$ADM1_EN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"w.p. labuan\" \"sabah\"       \"sarawak\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nunique(msia_adm2_east$ADM2_EN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"w.p. labuan\"   \"beaufort\"      \"beluran\"       \"keningau\"     \n [5] \"kinabatangan\"  \"kota belud\"    \"kota kinabalu\" \"kota marudu\"  \n [9] \"kuala penyu\"   \"kudat\"         \"kunak\"         \"lahad datu\"   \n[13] \"nabawan\"       \"papar\"         \"penampang\"     \"pitas\"        \n[17] \"putatan\"       \"ranau\"         \"sandakan\"      \"semporna\"     \n[21] \"sipitang\"      \"tambunan\"      \"tawau\"         \"tenom\"        \n[25] \"tongod\"        \"tuaran\"        \"asajaya\"       \"bau\"          \n[29] \"belaga\"        \"betong\"        \"bintulu\"       \"dalat\"        \n[33] \"daro\"          \"julau\"         \"kanowit\"       \"kapit\"        \n[37] \"kuching\"       \"lawas\"         \"limbang\"       \"lubok antu\"   \n[41] \"lundu\"         \"marudi\"        \"matu\"          \"meradong\"     \n[45] \"miri\"          \"mukah\"         \"pakan\"         \"samarahan\"    \n[49] \"saratok\"       \"sarikei\"       \"selangau\"      \"serian\"       \n[53] \"sibu\"          \"simunjan\"      \"song\"          \"sri aman\"     \n[57] \"tatau\"        \n```\n\n\n:::\n:::\n\n\n### 3.3 Aspatial Wrangling\n\n-   Likewise, we do filtering and wrangling on the **state** and **district, category: assault** and **type: rape.**\n\nFirst, we see the columns and rows available in sf using glimpse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(msia_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 19,152\nColumns: 6\n$ state    <chr> \"Malaysia\", \"Malaysia\", \"Malaysia\", \"Malaysia\", \"Malaysia\", \"…\n$ district <chr> \"All\", \"All\", \"All\", \"All\", \"All\", \"All\", \"All\", \"All\", \"All\"…\n$ category <chr> \"assault\", \"assault\", \"assault\", \"assault\", \"assault\", \"assau…\n$ type     <chr> \"all\", \"all\", \"all\", \"all\", \"all\", \"all\", \"all\", \"all\", \"caus…\n$ date     <date> 2016-01-01, 2017-01-01, 2018-01-01, 2019-01-01, 2020-01-01, …\n$ crimes   <dbl> 22327, 21366, 16902, 16489, 13279, 11495, 10348, 10453, 5531,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf <- msia_sf %>%\n  mutate(state = str_to_lower(state),  \n         state = str_trim(state)) %>%\n  mutate(district = str_to_lower(district),  \n       district = str_trim(district)) \n```\n:::\n\n\nNow, we separate East Malaysia, only filtering \"sabah\" and \"sarawak\" regions. We will select only the necessary columns: ADM1_EN, ADM2_EN, geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf_east <- msia_sf %>%\n  filter(state %in% c(\"sabah\", \"sarawak\"), \n         category == \"assault\", \n         type == \"rape\")\n\nmsia_sf_east\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 400 × 6\n   state district category type  date       crimes\n   <chr> <chr>    <chr>    <chr> <date>      <dbl>\n 1 sabah all      assault  rape  2016-01-01    193\n 2 sabah all      assault  rape  2017-01-01    211\n 3 sabah all      assault  rape  2018-01-01    178\n 4 sabah all      assault  rape  2019-01-01    219\n 5 sabah all      assault  rape  2020-01-01    153\n 6 sabah all      assault  rape  2021-01-01    140\n 7 sabah all      assault  rape  2022-01-01    197\n 8 sabah all      assault  rape  2023-01-01    225\n 9 sabah beaufort assault  rape  2016-01-01     11\n10 sabah beaufort assault  rape  2017-01-01     14\n# ℹ 390 more rows\n```\n\n\n:::\n:::\n\n\nWe see that we do not need the \"all\" results for districts and we need to do a sorting by their date of occurrence in ascending order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf_east <- msia_sf_east %>%\n  filter(year(ymd(date)) >= 2020 & year(ymd(date)) <= 2023) %>%\n  filter(district != \"all\") %>%\n  arrange(date) \n```\n:::\n\n\n[**Dealing with Inconsistencies and mispelled districts**]{.underline}\n\n-   **\"kota kinabatangan\"** in `msia_sf_east$district` should be **\"kinabatangan\"** as in `msia_adm2_east$ADM2_EN`.\n\n    -   rename \"kota kinbatangan\" to \"kinabatangan\" in `msia_sf_east$district`\n\n\n```{=html}\n<!-- -->\n```\n\n-   **\"matu daro\"** in `msia_sf_east$district` might represent two separate districts: **\"matu\"** and **\"daro\"** in `msia_adm2_east$ADM2_EN`.\n\n    -   will split first half of the (matu daro) rows take matu, second half take daro, impute with the average of the crimes of matu daro rows in `msia_sf_east$district`\n\n-   **\"padawan\"** in `msia_sf_east$district` does not appear in `msia_adm2_east$ADM2_EN`, as Padawan is often categorized within **\"kuching\"** but may need verification as a separate district.\n\n    -   follow shapefile, so we rename \"**padawan\"** in `msia_sf_east$district` to \"**kuching\"**\n\n-   **\"w.p. labuan\"** appears in `msia_sf_east$district` but is not listed in `msia_adm2_east$ADM2_EN`, which could be due to handling federal territories separately.\n\n    -   Update \"w.p. labuan\" as a separate state and district in `msia_sf_east$district`\n\n-   **\"kota samarahan\"** in `msia_sf_east$district` should be **\"samarahan\"** as in `msia_adm2_east$ADM2_EN`.\n\n    -   rename **\"kota samarahan\"** to **\"samarahan\"** in `msia_sf_east$district`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf_east_dealt <- msia_sf_east %>%\n  mutate(district = gsub(\"^kota kinabatangan$\", \"kinabatangan\", district),  # Rename \"kota kinbatangan\" to \"kinabatangan\"\n         district = gsub(\"^padawan$\", \"kuching\", district),\n         district = gsub(\"^kota samarahan$\", \"samarahan\", district)) %>% #rename \"padawan\" to \"kuching\" \n  \n  # Update \"w.p. labuan\" as a separate state and district\n  mutate(\n    state = if_else(state == \"sabah\" & district == \"w.p. labuan\", \"w.p. labuan\", state),\n    district = if_else(state == \"w.p. labuan\" & district == \"w.p. labuan\", \"w.p. labuan\", district)\n  )\n```\n:::\n\n\n-   impute average for matu daro, and split matu and daro\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_matu_daro <- function(data) {\n  # Filter rows for \"matu daro\"\n  matu_daro_data <- data %>%\n    filter(district == \"matu daro\")\n  print(matu_daro_data)\n  \n  # Calculate the average crimes for \"matu\" and \"daro\" from all entries\n  total_crimes <- sum(matu_daro_data$crimes) # Total crimes\n  num_entries <- nrow(matu_daro_data)        # Number of entries\n  \n  # Average for both \"matu\" and \"daro\"\n  average_crime <- round(total_crimes / num_entries) # Round to nearest whole number\n  print(average_crime)\n  \n   # Calculate midpoint for splitting the data\n  midpoint <- ceiling(num_entries / 2) # Use ceiling to handle odd numbers\n  \n  # Create new entries for \"matu\" and \"daro\"\n  new_entries <- bind_rows(\n    mutate(matu_daro_data[1:midpoint, ], district = \"matu\", crimes = average_crime), # First half for \"matu\"\n    mutate(matu_daro_data[(midpoint + 1):num_entries, ], district = \"daro\", crimes = average_crime) # Second half for \"daro\"\n  )\n  \n  # Print new entries for debugging\n  print(new_entries)\n  return(new_entries)\n}\n\nmatu_daro_split <- split_matu_daro(msia_sf_east_dealt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  state   district  category type  date       crimes\n  <chr>   <chr>     <chr>    <chr> <date>      <dbl>\n1 sarawak matu daro assault  rape  2020-01-01      1\n2 sarawak matu daro assault  rape  2021-01-01      1\n3 sarawak matu daro assault  rape  2022-01-01      2\n4 sarawak matu daro assault  rape  2023-01-01      0\n[1] 1\n# A tibble: 4 × 6\n  state   district category type  date       crimes\n  <chr>   <chr>    <chr>    <chr> <date>      <dbl>\n1 sarawak matu     assault  rape  2020-01-01      1\n2 sarawak matu     assault  rape  2021-01-01      1\n3 sarawak daro     assault  rape  2022-01-01      1\n4 sarawak daro     assault  rape  2023-01-01      1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combine the new entries with the existing data, removing old \"matu daro\" entries\nmsia_sf_east_final <- msia_sf_east_dealt %>%\n  filter(district != \"matu daro\") %>%\n  bind_rows(matu_daro_split)\n```\n:::\n\n\n3 states, 48 districts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_sf_east_final$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sabah\"       \"w.p. labuan\" \"sarawak\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nunique(msia_sf_east_final$district)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"beaufort\"      \"beluran\"       \"keningau\"      \"kota belud\"   \n [5] \"kota kinabalu\" \"kinabatangan\"  \"kota marudu\"   \"kudat\"        \n [9] \"kunak\"         \"lahad datu\"    \"papar\"         \"penampang\"    \n[13] \"ranau\"         \"sandakan\"      \"semporna\"      \"sipitang\"     \n[17] \"tawau\"         \"tenom\"         \"tuaran\"        \"w.p. labuan\"  \n[21] \"bau\"           \"belaga\"        \"betong\"        \"bintulu\"      \n[25] \"dalat\"         \"julau\"         \"kanowit\"       \"kapit\"        \n[29] \"samarahan\"     \"kuching\"       \"lawas\"         \"limbang\"      \n[33] \"lubok antu\"    \"lundu\"         \"marudi\"        \"meradong\"     \n[37] \"miri\"          \"mukah\"         \"saratok\"       \"sarikei\"      \n[41] \"serian\"        \"sibu\"          \"simunjan\"      \"song\"         \n[45] \"sri aman\"      \"tatau\"         \"matu\"          \"daro\"         \n```\n\n\n:::\n:::\n\n\n### 3.4 Combine Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join <- msia_adm2_east %>%\n  left_join(msia_sf_east_final, by = c(\"ADM1_EN\" = \"state\", \"ADM2_EN\" = \"district\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_values <- msia_left_join %>%\n  filter(is.na(crimes)) # Replace 'crimes' with the relevant column(s) you want to check\n\nprint(missing_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 9 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 110.4736 ymin: 1.519756 xmax: 117.5625 ymax: 7.013332\nGeodetic CRS:  WGS 84\n  ADM1_EN     ADM2_EN category type date crimes                       geometry\n1   sabah kuala penyu     <NA> <NA> <NA>     NA MULTIPOLYGON (((115.3682 5....\n2   sabah     nabawan     <NA> <NA> <NA>     NA MULTIPOLYGON (((115.8903 4....\n3   sabah       pitas     <NA> <NA> <NA>     NA MULTIPOLYGON (((116.9781 6....\n4   sabah     putatan     <NA> <NA> <NA>     NA MULTIPOLYGON (((116.0662 5....\n5   sabah    tambunan     <NA> <NA> <NA>     NA MULTIPOLYGON (((116.552 5.5...\n6   sabah      tongod     <NA> <NA> <NA>     NA MULTIPOLYGON (((117.5155 4....\n7 sarawak     asajaya     <NA> <NA> <NA>     NA MULTIPOLYGON (((110.664 1.5...\n8 sarawak       pakan     <NA> <NA> <NA>     NA MULTIPOLYGON (((111.7907 1....\n9 sarawak    selangau     <NA> <NA> <NA>     NA MULTIPOLYGON (((112.6285 2....\n```\n\n\n:::\n:::\n\n\nAfter left-joining, we see that these are the columns that are not present in our working data but are present in our boundary data, we thus have no choice but to drop them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join <- msia_left_join %>%\n  filter(!is.na(crimes)) %>%\n  arrange(date) %>%\n  select(1:2, 5:7) \n```\n:::\n\n\n### 3.5 Pivot longer to reduce number of rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join_pivot <- msia_left_join %>%\n  # Ensure 'date' is of Date type, if not already\n  mutate(date = as.Date(date)) %>%\n  # Extract year from the date\n  mutate(year = year(date)) %>%\n  # Group by the necessary columns and summarize\n  group_by(ADM1_EN, ADM2_EN, geometry, year) %>%\n  # Summarize the crimes for each group, summing them up\n  summarise(crimes = sum(crimes, na.rm = TRUE), .groups = \"drop\") %>%\n  # Pivot wider to create crime columns for each year\n  pivot_wider(\n    names_from = year, \n    values_from = crimes,\n    names_prefix = \"crimes_\",\n    values_fill = list(crimes = NULL)  # Fill NA values with NULL\n  )\n\n# View the resulting dataset\nprint(msia_left_join_pivot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 48 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 109.5379 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 7\n   ADM1_EN ADM2_EN                  geometry crimes_2020 crimes_2021 crimes_2022\n   <chr>   <chr>          <MULTIPOLYGON [°]>       <dbl>       <dbl>       <dbl>\n 1 sabah   beaufo… (((115.58 5.213697, 115.…           4           7           7\n 2 sabah   beluran (((117.7142 6.260833, 11…           8           6          16\n 3 sabah   kening… (((116.0938 4.861981, 11…           6           8          14\n 4 sabah   kinaba… (((119.2474 5.26962, 118…           5           4           5\n 5 sabah   kota b… (((116.61 6.666111, 116.…           7           6           6\n 6 sabah   kota k… (((116.3009 5.85547, 116…          22          15          31\n 7 sabah   kota m… (((116.3408 6.401667, 11…           9           5           9\n 8 sabah   kudat   (((116.6292 6.688926, 11…           2           6           8\n 9 sabah   kunak   (((118.1334 4.862195, 11…           3           1           1\n10 sabah   lahad … (((117.746 4.758972, 117…           7          11          10\n# ℹ 38 more rows\n# ℹ 1 more variable: crimes_2023 <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join %>%\n  mutate(date = as.Date(date)) %>%\n  mutate(year = year(date)) %>%\n  group_by(ADM1_EN, ADM2_EN, geometry, year) %>%\n  summarise(n = n(), .groups = \"drop\") %>%\n  filter(n > 1)  # This will show any groups with duplicates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 4 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 110.1278 ymin: 1.05063 xmax: 110.5339 ymax: 1.80667\nGeodetic CRS:  WGS 84\n# A tibble: 4 × 5\n  ADM1_EN ADM2_EN                                           geometry  year     n\n* <chr>   <chr>                                   <MULTIPOLYGON [°]> <dbl> <int>\n1 sarawak kuching (((110.1389 1.684166, 110.1389 1.685, 110.1391 1.…  2020     2\n2 sarawak kuching (((110.1389 1.684166, 110.1389 1.685, 110.1391 1.…  2021     2\n3 sarawak kuching (((110.1389 1.684166, 110.1389 1.685, 110.1391 1.…  2022     2\n4 sarawak kuching (((110.1389 1.684166, 110.1389 1.685, 110.1391 1.…  2023     2\n```\n\n\n:::\n:::\n\n\n### 3.6 Projection Transformation\n\nAcquiring the code from <https://epsg.io/32649>,\n\n-   We will transform the it to East Malaysias's projected coordinate system (UTM Zone 49N) with the EPSG code: 32649\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msia_left_join_pivot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia <- msia_left_join_pivot %>%\n  st_transform(crs=32649)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msia)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32649 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 49N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 49N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",111,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 108°E and 114°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Hong Kong. Indonesia. Macao. Malaysia - East Malaysia - Sarawak. Mongolia. Russian Federation. Vietnam.\"],\n        BBOX[0,108,84,114]],\n    ID[\"EPSG\",32649]]\n```\n\n\n:::\n:::\n\n\n### 3.7 Visualisation\n\n### 3.8 Write/Read rds\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(msia, \"data/rds/msia.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia <- read_rds(\"data/rds/msia.rds\")\n```\n:::\n\n\n## 4.0 Shiny Visualisation / Shiny Storyboard\n\n## 5.0 Spatial Weights and Applications\n\n## 6.0\n\n## 7.0\n\n## 8.0\n",
    "supporting": [
      "take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}