{
  "hash": "dc7e75e682f074a6bb92338c46af0628",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 3: Prototyping Modules for Geospatial Analytics Shiny Application\"\nauthor: \"Marcus Jaeson Yeo\"\ndate: \"October 27, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n## 1.0 Overview\n\n### 1.1 Objectives\n\n-   To evaluate and determine the necessary R packages needed for your Shiny application are supported in R CRAN,\n\n-   To prepare and test the specific R codes can be run and returned the correct output as expected,\n\n-   To determine the parameters and outputs that will be exposed on the Shiny applications, and\n\n-   To select the appropriate Shiny UI components for exposing the parameters determine above.\n\n### 1.2 Focus\n\nThe focus within this Take-Home Exercise, as part of the group project, would be our geographical and aspatial target on:\n\n-   districts within East Malaysia (Sabah, Sarawak, W.P Labuan)\n\n    -   \\[Profile of East Malaysia\\](https://www.mavcom.my/en/industry/public-service-obligations/profile-of-east-malaysia/#:\\~:text=East%20Malaysia%20(consisting%20of%20the,by%20the%20South%20China%20Sea.)\n\n-   category: assault\n\n-   type: rape\n\nWe will be discovering the **rape** trends that take place within the **districts** of **East Malaysia**, across the years **2020-2023**, discovering the emerging hot spots and cold spots, outliers, as well as determine the spatial autocorrelation within these districts.\n\n### 1.3 Prototyping for Shiny Application\n\n## 2.0 Load packages\n\n-   sf\n\n-   tmap\n\n-   tidyverse\n\n-   spdep\n\n-   sfdep\n\n-   dplyr\n\n-   tidyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, spdep, sfdep, dplyr, tidyr)\n```\n:::\n\n\n## 3.0 Importing Data and Data Wrangling\n\n### 3.1 Raw Data\n\n-   geospatial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_adm2 <- st_read(dsn = 'data/geospatial/', layer = 'mys_admbnda_adm2_unhcr_20210211')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `mys_admbnda_adm2_unhcr_20210211' from data source \n  `C:\\marcus159260\\IS415-GAA\\take-home_exercises\\take-home_ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 144 features and 14 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 99.64072 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# msia_adm2_shp <- st_read(dsn = 'data/geospatial/mys_admbnda_adm1_unhcr_20210211.shp')\n```\n:::\n\n\n-   aspatial\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf <- read_csv('data/aspatial/crime_district.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 19152 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): state, district, category, type\ndbl  (1): crimes\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### 3.2 Geospatial Wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(msia_adm2[\"ADM2_EN\"])\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nUpon plotting out the shapefile of Admin level 2, we can see that it takes both East and West Malaysia. However, we only want East Malaysia (Sabah, Sarawak).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_adm2$ADM1_EN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Johor\"             \"Kedah\"             \"Kelantan\"         \n [4] \"W.P. Kuala Lumpur\" \"W.P. Labuan\"       \"Melaka\"           \n [7] \"Negeri Sembilan\"   \"Pahang\"            \"Perak\"            \n[10] \"Perlis\"            \"Pulau Pinang\"      \"Sabah\"            \n[13] \"Sarawak\"           \"Terengganu\"        \"W.P. Putrajaya\"   \n[16] \"Selangor\"         \n```\n\n\n:::\n:::\n\n\nWe will convert all to lowercase and do necessary trimming for appropriate left-join later to combine with our working data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_adm2 <- msia_adm2 %>%\n  mutate(ADM1_EN = str_to_lower(ADM1_EN),  \n         ADM1_EN = str_trim(ADM1_EN)) %>%\n  mutate(ADM2_EN = str_to_lower(ADM2_EN),  \n       ADM2_EN = str_trim(ADM2_EN)) \n```\n:::\n\n\nNow, we separate East Malaysia, only filtering \"sabah\", \"sarawak\", \"w.p. labuan\" regions. We will select only the necessary columns: ADM1_EN, ADM2_EN, geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_adm2_east <- msia_adm2 %>%\n  filter(ADM1_EN %in% c(\"sabah\", \"sarawak\", \"w.p. labuan\")) %>%\n  select(\"ADM1_EN\", \"ADM2_EN\", \"geometry\")\n\nmsia_adm2_east\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 57 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 109.5379 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\nFirst 10 features:\n       ADM1_EN       ADM2_EN                       geometry\n1  w.p. labuan   w.p. labuan MULTIPOLYGON (((115.2528 5....\n2        sabah      beaufort MULTIPOLYGON (((115.58 5.21...\n3        sabah       beluran MULTIPOLYGON (((117.7142 6....\n4        sabah      keningau MULTIPOLYGON (((116.0938 4....\n5        sabah  kinabatangan MULTIPOLYGON (((119.2474 5....\n6        sabah    kota belud MULTIPOLYGON (((116.61 6.66...\n7        sabah kota kinabalu MULTIPOLYGON (((116.3009 5....\n8        sabah   kota marudu MULTIPOLYGON (((116.3408 6....\n9        sabah   kuala penyu MULTIPOLYGON (((115.3682 5....\n10       sabah         kudat MULTIPOLYGON (((116.6292 6....\n```\n\n\n:::\n:::\n\n\nNow, when we plot back, we can see that only East Malaysia polygon shapes are filtered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(msia_adm2_east)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n3 states, 57 districts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_adm2_east$ADM1_EN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"w.p. labuan\" \"sabah\"       \"sarawak\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nunique(msia_adm2_east$ADM2_EN)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"w.p. labuan\"   \"beaufort\"      \"beluran\"       \"keningau\"     \n [5] \"kinabatangan\"  \"kota belud\"    \"kota kinabalu\" \"kota marudu\"  \n [9] \"kuala penyu\"   \"kudat\"         \"kunak\"         \"lahad datu\"   \n[13] \"nabawan\"       \"papar\"         \"penampang\"     \"pitas\"        \n[17] \"putatan\"       \"ranau\"         \"sandakan\"      \"semporna\"     \n[21] \"sipitang\"      \"tambunan\"      \"tawau\"         \"tenom\"        \n[25] \"tongod\"        \"tuaran\"        \"asajaya\"       \"bau\"          \n[29] \"belaga\"        \"betong\"        \"bintulu\"       \"dalat\"        \n[33] \"daro\"          \"julau\"         \"kanowit\"       \"kapit\"        \n[37] \"kuching\"       \"lawas\"         \"limbang\"       \"lubok antu\"   \n[41] \"lundu\"         \"marudi\"        \"matu\"          \"meradong\"     \n[45] \"miri\"          \"mukah\"         \"pakan\"         \"samarahan\"    \n[49] \"saratok\"       \"sarikei\"       \"selangau\"      \"serian\"       \n[53] \"sibu\"          \"simunjan\"      \"song\"          \"sri aman\"     \n[57] \"tatau\"        \n```\n\n\n:::\n:::\n\n\n### 3.3 Aspatial Wrangling\n\n-   Likewise, we do filtering and wrangling on the **state** and **district, category: assault** and **type: rape.**\n\nFirst, we see the columns and rows available in sf using glimpse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(msia_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 19,152\nColumns: 6\n$ state    <chr> \"Malaysia\", \"Malaysia\", \"Malaysia\", \"Malaysia\", \"Malaysia\", \"…\n$ district <chr> \"All\", \"All\", \"All\", \"All\", \"All\", \"All\", \"All\", \"All\", \"All\"…\n$ category <chr> \"assault\", \"assault\", \"assault\", \"assault\", \"assault\", \"assau…\n$ type     <chr> \"all\", \"all\", \"all\", \"all\", \"all\", \"all\", \"all\", \"all\", \"caus…\n$ date     <date> 2016-01-01, 2017-01-01, 2018-01-01, 2019-01-01, 2020-01-01, …\n$ crimes   <dbl> 22327, 21366, 16902, 16489, 13279, 11495, 10348, 10453, 5531,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf <- msia_sf %>%\n  mutate(state = str_to_lower(state),  \n         state = str_trim(state)) %>%\n  mutate(district = str_to_lower(district),  \n       district = str_trim(district)) \n```\n:::\n\n\nNow, we separate East Malaysia, only filtering \"sabah\" and \"sarawak\" regions. We will select only the necessary columns: ADM1_EN, ADM2_EN, geometry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf_east <- msia_sf %>%\n  filter(state %in% c(\"sabah\", \"sarawak\"), \n         category == \"assault\") %>%\n  filter(type != \"all\")\n\nmsia_sf_east\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,800 × 6\n   state district category type           date       crimes\n   <chr> <chr>    <chr>    <chr>          <date>      <dbl>\n 1 sabah all      assault  causing_injury 2016-01-01    213\n 2 sabah all      assault  causing_injury 2017-01-01    230\n 3 sabah all      assault  causing_injury 2018-01-01    216\n 4 sabah all      assault  causing_injury 2019-01-01    221\n 5 sabah all      assault  causing_injury 2020-01-01    176\n 6 sabah all      assault  causing_injury 2021-01-01    148\n 7 sabah all      assault  causing_injury 2022-01-01    169\n 8 sabah all      assault  causing_injury 2023-01-01    176\n 9 sabah all      assault  murder         2016-01-01     60\n10 sabah all      assault  murder         2017-01-01     36\n# ℹ 2,790 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_sf_east$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"causing_injury\"       \"murder\"               \"rape\"                \n[4] \"robbery_gang_armed\"   \"robbery_gang_unarmed\" \"robbery_solo_armed\"  \n[7] \"robbery_solo_unarmed\"\n```\n\n\n:::\n:::\n\n\nWe see that we do not need the \"all\" results for districts and we need to do a sorting by their date of occurrence in ascending order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf_east <- msia_sf_east %>%\n  filter(year(ymd(date)) >= 2020 & year(ymd(date)) <= 2023) %>%\n  filter(district != \"all\") %>%\n  arrange(date) \n```\n:::\n\n\n[**Dealing with Inconsistencies and mispelled districts**]{.underline}\n\n-   **\"kota kinabatangan\"** in `msia_sf_east$district` should be **\"kinabatangan\"** as in `msia_adm2_east$ADM2_EN`.\n\n    -   rename \"kota kinbatangan\" to \"kinabatangan\" in `msia_sf_east$district`\n\n-   **\"matu daro\"** in `msia_sf_east$district` might represent two separate districts: **\"matu\"** and **\"daro\"** in `msia_adm2_east$ADM2_EN`.\n\n    -   will split first half of the (matu daro) rows take matu, second half take daro, impute with the average of the crimes of matu daro rows in `msia_sf_east$district`\n\n-   **\"padawan\"** in `msia_sf_east$district` does not appear in `msia_adm2_east$ADM2_EN`, as Padawan is often categorized within **\"kuching\"** but may need verification as a separate district.\n\n    -   follow shapefile, so we rename \"**padawan\"** in `msia_sf_east$district` to \"**kuching\"**\n\n-   **\"w.p. labuan\"** appears in `msia_sf_east$district` but is not listed in `msia_adm2_east$ADM2_EN`, which could be due to handling federal territories separately.\n\n    -   Update \"w.p. labuan\" as a separate state and district in `msia_sf_east$district`\n\n-   **\"kota samarahan\"** in `msia_sf_east$district` should be **\"samarahan\"** as in `msia_adm2_east$ADM2_EN`.\n\n    -   rename **\"kota samarahan\"** to **\"samarahan\"** in `msia_sf_east$district`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_sf_east_dealt <- msia_sf_east %>%\n  mutate(district = gsub(\"^kota kinabatangan$\", \"kinabatangan\", district),  # Rename \"kota kinbatangan\" to \"kinabatangan\"\n         district = gsub(\"^padawan$\", \"kuching\", district),\n         district = gsub(\"^kota samarahan$\", \"samarahan\", district)) %>% #rename \"padawan\" to \"kuching\" \n  \n  # Update \"w.p. labuan\" as a separate state and district\n  mutate(\n    state = if_else(state == \"sabah\" & district == \"w.p. labuan\", \"w.p. labuan\", state),\n    district = if_else(state == \"w.p. labuan\" & district == \"w.p. labuan\", \"w.p. labuan\", district)\n  )\n```\n:::\n\n\n-   impute average for matu daro, and split matu and daro\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsplit_matu_daro <- function(data) {\n  # Filter rows for \"matu daro\"\n  matu_daro_data <- data %>%\n    filter(district == \"matu daro\")\n  print(matu_daro_data)\n  \n  # Calculate the average crimes for \"matu\" and \"daro\" from all entries\n  total_crimes <- sum(matu_daro_data$crimes) # Total crimes\n  num_entries <- nrow(matu_daro_data)        # Number of entries\n  \n  # Average for both \"matu\" and \"daro\"\n  average_crime <- round(total_crimes / num_entries) # Round to nearest whole number\n  print(average_crime)\n  \n   # Calculate midpoint for splitting the data\n  midpoint <- ceiling(num_entries / 2) # Use ceiling to handle odd numbers\n  \n  # Create new entries for \"matu\" and \"daro\"\n  new_entries <- bind_rows(\n    mutate(matu_daro_data[1:midpoint, ], district = \"matu\", crimes = average_crime), # First half for \"matu\"\n    mutate(matu_daro_data[(midpoint + 1):num_entries, ], district = \"daro\", crimes = average_crime) # Second half for \"daro\"\n  )\n  \n  # Print new entries for debugging\n  print(new_entries)\n  return(new_entries)\n}\n\nmatu_daro_split <- split_matu_daro(msia_sf_east_dealt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 28 × 6\n   state   district  category type                 date       crimes\n   <chr>   <chr>     <chr>    <chr>                <date>      <dbl>\n 1 sarawak matu daro assault  causing_injury       2020-01-01      0\n 2 sarawak matu daro assault  murder               2020-01-01      0\n 3 sarawak matu daro assault  rape                 2020-01-01      1\n 4 sarawak matu daro assault  robbery_gang_armed   2020-01-01      0\n 5 sarawak matu daro assault  robbery_gang_unarmed 2020-01-01      0\n 6 sarawak matu daro assault  robbery_solo_armed   2020-01-01      0\n 7 sarawak matu daro assault  robbery_solo_unarmed 2020-01-01      0\n 8 sarawak matu daro assault  causing_injury       2021-01-01      0\n 9 sarawak matu daro assault  murder               2021-01-01      0\n10 sarawak matu daro assault  rape                 2021-01-01      1\n# ℹ 18 more rows\n[1] 0\n# A tibble: 28 × 6\n   state   district category type                 date       crimes\n   <chr>   <chr>    <chr>    <chr>                <date>      <dbl>\n 1 sarawak matu     assault  causing_injury       2020-01-01      0\n 2 sarawak matu     assault  murder               2020-01-01      0\n 3 sarawak matu     assault  rape                 2020-01-01      0\n 4 sarawak matu     assault  robbery_gang_armed   2020-01-01      0\n 5 sarawak matu     assault  robbery_gang_unarmed 2020-01-01      0\n 6 sarawak matu     assault  robbery_solo_armed   2020-01-01      0\n 7 sarawak matu     assault  robbery_solo_unarmed 2020-01-01      0\n 8 sarawak matu     assault  causing_injury       2021-01-01      0\n 9 sarawak matu     assault  murder               2021-01-01      0\n10 sarawak matu     assault  rape                 2021-01-01      0\n# ℹ 18 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combine the new entries with the existing data, removing old \"matu daro\" entries\nmsia_sf_east_final <- msia_sf_east_dealt %>%\n  filter(district != \"matu daro\") %>%\n  bind_rows(matu_daro_split)\n```\n:::\n\n\n3 states, 48 districts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(msia_sf_east_final$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sabah\"       \"w.p. labuan\" \"sarawak\"    \n```\n\n\n:::\n\n```{.r .cell-code}\nunique(msia_sf_east_final$district)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"beaufort\"      \"beluran\"       \"keningau\"      \"kota belud\"   \n [5] \"kota kinabalu\" \"kinabatangan\"  \"kota marudu\"   \"kudat\"        \n [9] \"kunak\"         \"lahad datu\"    \"papar\"         \"penampang\"    \n[13] \"ranau\"         \"sandakan\"      \"semporna\"      \"sipitang\"     \n[17] \"tawau\"         \"tenom\"         \"tuaran\"        \"w.p. labuan\"  \n[21] \"bau\"           \"belaga\"        \"betong\"        \"bintulu\"      \n[25] \"dalat\"         \"julau\"         \"kanowit\"       \"kapit\"        \n[29] \"samarahan\"     \"kuching\"       \"lawas\"         \"limbang\"      \n[33] \"lubok antu\"    \"lundu\"         \"marudi\"        \"meradong\"     \n[37] \"miri\"          \"mukah\"         \"saratok\"       \"sarikei\"      \n[41] \"serian\"        \"sibu\"          \"simunjan\"      \"song\"         \n[45] \"sri aman\"      \"tatau\"         \"matu\"          \"daro\"         \n```\n\n\n:::\n:::\n\n\n### 3.4 Combine Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join <- msia_adm2_east %>%\n  left_join(msia_sf_east_final, by = c(\"ADM1_EN\" = \"state\", \"ADM2_EN\" = \"district\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmissing_values <- msia_left_join %>%\n  filter(is.na(crimes)) # Replace 'crimes' with the relevant column(s) you want to check\n\nprint(missing_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 9 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 110.4736 ymin: 1.519756 xmax: 117.5625 ymax: 7.013332\nGeodetic CRS:  WGS 84\n  ADM1_EN     ADM2_EN category type date crimes                       geometry\n1   sabah kuala penyu     <NA> <NA> <NA>     NA MULTIPOLYGON (((115.3682 5....\n2   sabah     nabawan     <NA> <NA> <NA>     NA MULTIPOLYGON (((115.8903 4....\n3   sabah       pitas     <NA> <NA> <NA>     NA MULTIPOLYGON (((116.9781 6....\n4   sabah     putatan     <NA> <NA> <NA>     NA MULTIPOLYGON (((116.0662 5....\n5   sabah    tambunan     <NA> <NA> <NA>     NA MULTIPOLYGON (((116.552 5.5...\n6   sabah      tongod     <NA> <NA> <NA>     NA MULTIPOLYGON (((117.5155 4....\n7 sarawak     asajaya     <NA> <NA> <NA>     NA MULTIPOLYGON (((110.664 1.5...\n8 sarawak       pakan     <NA> <NA> <NA>     NA MULTIPOLYGON (((111.7907 1....\n9 sarawak    selangau     <NA> <NA> <NA>     NA MULTIPOLYGON (((112.6285 2....\n```\n\n\n:::\n:::\n\n\nAfter left-joining, we see that these are the columns that are not present in our working data but are present in our boundary data, we thus have no choice but to drop them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join <- msia_left_join %>%\n  filter(!is.na(crimes)) %>%\n  arrange(date) %>%\n  select(1:2, 4:7) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(msia_left_join, \"data/rds/msia_left_join.rds\")\n```\n:::\n\n\n### 3.5 Pivot longer to reduce number of rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_total_crimes <- msia_left_join %>%\n  # Ensure 'date' is of Date type, if not already\n  mutate(date = as.Date(date)) %>%\n  # Extract year from the date\n  mutate(year = year(date)) %>%\n  # Group by ADM1_EN, ADM2_EN, geometry, and type, then summarize crimes across all years\n  group_by(ADM1_EN, ADM2_EN, geometry, type) %>%\n  summarise(total_type_crimes = sum(crimes, na.rm = TRUE), .groups = \"drop\") %>%\n  # Pivot wider to create columns for each crime type across all years\n  pivot_wider(\n    names_from = type,\n    values_from = total_type_crimes,\n    names_prefix = \"total_crimes_\",\n    values_fill = list(total_type_crimes = 0)\n  ) %>%\n  # Add a total_crimes column summing across all types for each district\n  rowwise() %>%\n  mutate(total_crimes = sum(c_across(starts_with(\"total_crimes_\")), na.rm = TRUE)) %>%\n  ungroup() %>%\n  # Keep ADM1_EN, ADM2_EN, and geometry as required, and reorder columns\n  select(ADM2_EN, ADM1_EN, geometry, total_crimes, everything())\n  \n# View the resulting dataset\nprint(msia_total_crimes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 48 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 109.5379 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 11\n   ADM2_EN ADM1_EN                  geometry total_crimes total_crimes_causing…¹\n   <chr>   <chr>          <MULTIPOLYGON [°]>        <dbl>                  <dbl>\n 1 beaufo… sabah   (((115.58 5.213697, 115.…           39                     15\n 2 beluran sabah   (((117.7142 6.260833, 11…           72                     23\n 3 kening… sabah   (((116.0938 4.861981, 11…           93                     22\n 4 kinaba… sabah   (((119.2474 5.26962, 118…           56                     25\n 5 kota b… sabah   (((116.61 6.666111, 116.…           52                     15\n 6 kota k… sabah   (((116.3009 5.85547, 116…          405                    153\n 7 kota m… sabah   (((116.3408 6.401667, 11…           49                      9\n 8 kudat   sabah   (((116.6292 6.688926, 11…           42                     18\n 9 kunak   sabah   (((118.1334 4.862195, 11…           27                      8\n10 lahad … sabah   (((117.746 4.758972, 117…          116                     32\n# ℹ 38 more rows\n# ℹ abbreviated name: ¹​total_crimes_causing_injury\n# ℹ 6 more variables: total_crimes_murder <dbl>, total_crimes_rape <dbl>,\n#   total_crimes_robbery_gang_armed <dbl>,\n#   total_crimes_robbery_gang_unarmed <dbl>,\n#   total_crimes_robbery_solo_armed <dbl>,\n#   total_crimes_robbery_solo_unarmed <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_left_join_pivot <- msia_left_join %>%\n  # Ensure 'date' is of Date type, if not already\n  mutate(date = as.Date(date)) %>%\n  # Extract year from the date\n  mutate(year = year(date)) %>%\n  # Group by the necessary columns and summarize\n  group_by(ADM1_EN, ADM2_EN, geometry, type, year) %>%\n  # Summarize the crimes for each group, summing them up\n  summarise(crimes = sum(crimes, na.rm = TRUE), .groups = \"drop\") %>%\n  # Pivot wider to create crime columns for each year\n  pivot_wider(\n    # names_from = year, \n    names_from = c(type, year),\n    values_from = crimes,\n    names_prefix = \"crimes_\",\n    # names_prefix = \"crimes_\",\n    values_fill = list(crimes = NULL)  # Fill NA values with NULL\n  ) \n\n# View the resulting dataset\nprint(msia_left_join_pivot)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 48 features and 30 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 109.5379 ymin: 0.855001 xmax: 119.2697 ymax: 7.380556\nGeodetic CRS:  WGS 84\n# A tibble: 48 × 31\n   ADM1_EN ADM2_EN                               geometry crimes_causing_injur…¹\n   <chr>   <chr>                       <MULTIPOLYGON [°]>                  <dbl>\n 1 sabah   beaufort      (((115.58 5.213697, 115.5798 5.…                      1\n 2 sabah   beluran       (((117.7142 6.260833, 117.7144 …                      5\n 3 sabah   keningau      (((116.0938 4.861981, 116.0916 …                      7\n 4 sabah   kinabatangan  (((119.2474 5.26962, 118.3465 5…                      7\n 5 sabah   kota belud    (((116.61 6.666111, 116.6191 6.…                      9\n 6 sabah   kota kinabalu (((116.3009 5.85547, 116.2936 5…                     41\n 7 sabah   kota marudu   (((116.3408 6.401667, 116.3408 …                      4\n 8 sabah   kudat         (((116.6292 6.688926, 116.6292 …                      4\n 9 sabah   kunak         (((118.1334 4.862195, 118.1334 …                      0\n10 sabah   lahad datu    (((117.746 4.758972, 117.7419 4…                      6\n# ℹ 38 more rows\n# ℹ abbreviated name: ¹​crimes_causing_injury_2020\n# ℹ 27 more variables: crimes_causing_injury_2021 <dbl>,\n#   crimes_causing_injury_2022 <dbl>, crimes_causing_injury_2023 <dbl>,\n#   crimes_murder_2020 <dbl>, crimes_murder_2021 <dbl>,\n#   crimes_murder_2022 <dbl>, crimes_murder_2023 <dbl>, crimes_rape_2020 <dbl>,\n#   crimes_rape_2021 <dbl>, crimes_rape_2022 <dbl>, crimes_rape_2023 <dbl>, …\n```\n\n\n:::\n:::\n\n\n### 3.6 Projection Transformation\n\nAcquiring the code from <https://epsg.io/32649>,\n\n-   We will transform the it to East Malaysias's projected coordinate system (UTM Zone 49N) with the EPSG code: 32649\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msia_total_crimes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia <- msia_left_join_pivot %>%\n  st_transform(crs=32649)\n\nmsia_total_crimes <- msia_total_crimes %>%\n    st_transform(crs=32649)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(msia_total_crimes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32649 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 49N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 49N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",111,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 108°E and 114°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Hong Kong. Indonesia. Macao. Malaysia - East Malaysia - Sarawak. Mongolia. Russian Federation. Vietnam.\"],\n        BBOX[0,108,84,114]],\n    ID[\"EPSG\",32649]]\n```\n\n\n:::\n:::\n\n\n### 3.7 Visualisation\n\n### 3.8 Write/Read rds\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(msia_total_crimes, \"data/rds/msia_total_crimes.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(msia, \"data/rds/msia.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia <- read_rds(\"data/rds/msia.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_total_crimes <- read_rds(\"data/rds/msia_total_crimes.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neast_msia <- read_rds(\"data/rds/EAST_MSIA.rds\")\n```\n:::\n\n\n## 4.0 Shiny Visualisation / Shiny Storyboard\n\nBelow are screenshots from the shiny app depicting our Shiny Storyboard for East Malaysia\n\n-   EDA\n\n    -   Basemap\n\n        -   Basemap depicting all the different districts within East Malaysia\n\n    ![](images/clipboard-1910243840.png)\n\n    -   Visualisation with different classification methods\n\n        -   Able to filter based on total crimes, and other types such as rape, murder\n\n        -   Able to filter based on classification methods such as equal, quantile, pretty\n\n        -   Different Colour Schemes, Number of classes, and Transparency are also able to be adjusted\n\n![](images/clipboard-2140389107.png)\n\n## 6.0 Spatial Weights and Applications\n\n## 6.0 Global Measures of Spatial Autocorrelation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(msia_total_crimes, \n                queen = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(msia_total_crimes, queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(msia_total_crimes, queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 152 \nPercentage nonzero weights: 6.597222 \nAverage number of links: 3.166667 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6 \n 1  1 12 17 11  4  2 \n1 least connected region:\n8 with 1 link\n2 most connected regions:\n43 45 with 6 links\n```\n\n\n:::\n:::\n\n\n-   If we attempt to use contiguity-based spatial weights to find neighbours, and use the queen method, we come up with a region that is not linked to any neighbours, which is incorrect.\n\nLets print out the region with the 0 link. It turns out to be \"w.p. labuan\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(c(msia_total_crimes$ADM1_EN[48], msia_total_crimes$ADM2_EN[48]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"w.p. labuan\" \"w.p. labuan\"\n```\n\n\n:::\n:::\n\n\nHence, instead of using contiguity-based methods to find neighbours, we need to swap to using distance-based methods instead to find neighbours and do our global spatial autocorrelation.\n\n### 6.1 Configuring and Binding coordinates\n\n#### Computing longitude and latitude to achieve coordinates\n\n-   longitude\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongitude <- map_dbl(msia_total_crimes$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\n-   latitude\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlatitude <- map_dbl(msia_total_crimes$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n-   bind the coordinates\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- cbind(longitude, latitude)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(coords)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     longitude latitude\n[1,]   1022042 590736.6\n[2,]   1202703 673828.1\n[3,]   1080922 583121.1\n[4,]   1298928 602534.3\n[5,]   1110762 701440.2\n[6,]   1071946 666813.2\n```\n\n\n:::\n:::\n\n\n### 6.2 Computing distance-based neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk1 <- knn2nb(knearneigh(coords))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in knn2nb(knearneigh(coords)): neighbour object has 8 sub-graphs\n```\n\n\n:::\n\n```{.r .cell-code}\nk1dists <- unlist(nbdists(k1, coords, longlat = FALSE))\nsummary(k1dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  18735   31304   40118   44676   50629  111017 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n## This summary report shows that the largest first nearest neighbour distance is 111017 meters (UTM). As dnearneigh accepts meters and we need specify longlat = FALSE, lets round it up to 111100 meters and use this as our upper threshold will ensure us that all regions will at least have 1 neighbour.\n:::\n\n### 6.2.1 Attempting Fixed Distance\n\n-   within 111100 meters radius\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_d111100 <- dnearneigh(coords, 0, 111100, longlat = FALSE)\nwm_d111100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 318 \nPercentage nonzero weights: 13.80208 \nAverage number of links: 6.625 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nn_comp <- n.comp.nb(wm_d111100)\nn_comp$nc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(n_comp$comp.id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n 1 \n48 \n```\n\n\n:::\n:::\n\n\n#### Plotting fixed distance weight matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the boundary and neighborhood structures with adjusted limits\nplot(msia_total_crimes$geometry, border=\"lightgrey\")\nplot(wm_d111100, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-42-1.png){width=1152}\n:::\n:::\n\n\n-   Plot 1st nearest neighbours (red lines)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# par(mfrow=c(1,2))\nplot(msia_total_crimes$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-43-1.png){width=1152}\n:::\n\n```{.r .cell-code}\n# plot(msia_total_crimes$geometry, border=\"lightgrey\", main=\"Distance link\")\n# plot(wm_d111000, coords, add=TRUE, pch = 19, cex = 0.6)\n```\n:::\n\n\n### 6.2.2 Attempting Adaptive Distance\n\n#### Computing Adaptive Distance Weight matrix\n\n-   Lets fix k=6, and no go too far ahead as greater the k, the further the search of neighbours would be.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 288 \nPercentage nonzero weights: 12.5 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 288 \nPercentage nonzero weights: 12.5 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(knn6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 48\n $ : int [1:6] 3 11 12 16 18 48\n $ : int [1:6] 5 7 8 13 14 19\n $ : int [1:6] 1 6 11 12 16 18\n $ : int [1:6] 2 9 10 14 15 17\n $ : int [1:6] 6 7 8 12 13 19\n $ : int [1:6] 3 5 11 12 13 19\n $ : int [1:6] 2 5 6 8 13 19\n $ : int [1:6] 2 5 6 7 13 19\n $ : int [1:6] 2 4 10 14 15 17\n $ : int [1:6] 2 4 9 14 15 17\n $ : int [1:6] 1 3 6 12 18 19\n $ : int [1:6] 3 5 6 11 13 19\n $ : int [1:6] 2 5 6 7 12 19\n $ : int [1:6] 2 4 9 10 13 17\n $ : int [1:6] 2 4 9 10 14 17\n $ : int [1:6] 1 3 18 30 31 48\n $ : int [1:6] 3 4 9 10 14 15\n $ : int [1:6] 1 3 11 16 30 48\n $ : int [1:6] 5 6 7 11 12 13\n $ : int [1:6] 29 33 39 40 42 44\n $ : int [1:6] 23 28 34 37 45 47\n $ : int [1:6] 26 36 40 41 44 46\n $ : int [1:6] 21 28 34 37 38 47\n $ : int [1:6] 25 27 35 36 38 43\n $ : int [1:6] 24 35 36 40 41 43\n $ : int [1:6] 27 32 36 41 43 45\n $ : int [1:6] 24 26 32 36 43 45\n $ : int [1:6] 21 23 27 38 45 47\n $ : int [1:6] 20 33 39 40 42 44\n $ : int [1:6] 1 3 16 18 31 48\n $ : int [1:6] 1 16 18 30 34 48\n $ : int [1:6] 22 26 27 36 45 46\n $ : int [1:6] 20 29 39 40 42 44\n $ : int [1:6] 16 21 23 30 31 37\n $ : int [1:6] 24 25 36 38 41 43\n $ : int [1:6] 25 26 35 40 41 43\n $ : int [1:6] 21 23 30 31 34 47\n $ : int [1:6] 24 27 35 36 43 47\n $ : int [1:6] 20 29 33 40 42 44\n $ : int [1:6] 22 25 26 36 41 46\n $ : int [1:6] 22 25 26 36 40 43\n $ : int [1:6] 20 22 29 33 39 44\n $ : int [1:6] 24 25 26 27 35 36\n $ : int [1:6] 22 29 39 40 42 46\n $ : int [1:6] 26 27 28 32 36 43\n $ : int [1:6] 22 26 32 40 41 44\n $ : int [1:6] 23 24 27 28 38 45\n $ : int [1:6] 1 11 16 18 30 31\n - attr(*, \"region.id\")= chr [1:48] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"ncomp\")=List of 2\n  ..$ nc     : int 1\n  ..$ comp.id: int [1:48] 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# table(msia$ADM2_EN, card(knn6))\n```\n:::\n\n\n#### Plotting adaptive distance weight matrix in Shiny\n\n![](images/clipboard-405232185.png)\n\n[**Decision:**]{.underline}\n\nBoth fixed distance and adaptive distance can be used. However, we need to take note that there are centroids located at the North-East side, on sea instead of on land due to multiple islands.\n\n### 6.2.3 Global Moran I: Access Spatial Autocorrelation using Adaptive Distance\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\nWe should also fix our style=\"w\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsknn6 <- nb2listw(knn6, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrsknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 288 \nPercentage nonzero weights: 12.5 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 48 2304 48 14.44444 196.6111\n```\n\n\n:::\n:::\n\n\n#### 1. Global Moran's I Test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(msia_total_crimes$total_crimes, \n           listw=rsknn6, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  msia_total_crimes$total_crimes  \nweights: rsknn6    \n\nMoran I statistic standard deviate = -0.0042367, p-value = 0.5017\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.021512570      -0.021276596       0.003102251 \n```\n\n\n:::\n:::\n\n\n#### 2. .Computing Monte Carlo Moran's I\n\n-   set a seed of 1234\n\n-   number of simulations = 1000\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm_moran= moran.mc(msia_total_crimes$total_crimes, \n                listw=rsknn6, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_moran\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  msia_total_crimes$total_crimes \nweights: rsknn6  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.021513, observed rank = 588, p-value = 0.412\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n-   moran I statistic: -0.021513 \\< 0 show signs of regularity, however weak.\n\n-   p-value = 0.412 \\> 0.05, at the 95% confidence interval, we fail to reject the null hypothesis (which assumes spatial randomness), meaning to say that we do not have enough evidence to conclude that there is significant spatial autocorrelation and clustering.\n\nHence, we accept null hypothesis (h0), and conclude that the result is not statistically significant, suggesting that the observed spatial pattern could be due to spatial randomness.\n\n#### 3. Visualising Monte Carlo Moran's I using Shiny\n\nComputing some basic statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#compute mean\nmean(bperm_moran$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.02278863\n```\n\n\n:::\n\n```{.r .cell-code}\ncat('\\n')\n```\n\n```{.r .cell-code}\n#compute variance\nvar(bperm_moran$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.003210544\n```\n\n\n:::\n\n```{.r .cell-code}\ncat('\\n')\n```\n\n```{.r .cell-code}\n#summary bperm\nsummary(bperm_moran$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.132251 -0.062097 -0.033119 -0.022789  0.003581  0.298735 \n```\n\n\n:::\n:::\n\n\n-   plotting histogram using ggplot2 in Shiny\n\n![](images/clipboard-396864859.png)\n\n### 6.3 Spatial Correlogram\n\n#### Compute Moran's I Spatial Correlogram\n\nIn the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a [**6-lag**]{.underline} spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The **plot()** of base Graph is then used to plot the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMI_corr <- sp.correlogram(knn6,                            \n                          msia_total_crimes$total_crimes,\n                          order=6,  #lag-value: 6                           \n                          method=\"I\",                            \n                          style=\"W\",\n                          zero.policy = TRUE) \n\nplot(MI_corr)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\n-   Looking at the first lag, it is close to 0, showing signs of randomness. This suggests that the total crimes of Thailand does not have spatial dependence. the following lags after shows negative Moran I, showing signs of regular patterns amongst 2nd order neighbours and below.\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(MI_corr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSpatial correlogram for msia_total_crimes$total_crimes \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided  \n1 (48) -0.0215126  -0.0212766  0.0031023          -0.0042         0.99662  \n2 (48) -0.0583456  -0.0212766  0.0023656          -0.7622         0.44597  \n3 (48) -0.0289484  -0.0212766  0.0023930          -0.1568         0.87538  \n4 (48) -0.1233814  -0.0212766  0.0032051          -1.8035         0.07130 .\n5 (48) -0.0018402  -0.0212766  0.0048057           0.2804         0.77919  \n6 (48)  0.1067613  -0.0212766  0.0041123           1.9966         0.04587 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n## 7.0 Local Measures of Spatial Autocorrelation\n\nWe need to use fixed-distance and adaptive-distance based methods for more reliable results.\n\n-   Local Moran's I: Detect local clusters (high-high and low-low) and local outliers (high-low, low-high)\n\n### 7.1 Adaptive Distance Weight Matrix\n\n-   stick to k=6, style='W'\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 288 \nPercentage nonzero weights: 12.5 \nAverage number of links: 6 \nNon-symmetric neighbours list\n```\n\n\n:::\n:::\n\n\nNext, *nb2listw()* is used to convert the nb object into spatial weights object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn6_lw <- nb2listw(knn6, style = 'W')\nsummary(knn6_lw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 48 \nNumber of nonzero links: 288 \nPercentage nonzero weights: 12.5 \nAverage number of links: 6 \nNon-symmetric neighbours list\nLink number distribution:\n\n 6 \n48 \n48 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 with 6 links\n48 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 with 6 links\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 48 2304 48 14.44444 196.6111\n```\n\n\n:::\n:::\n\n\nHere, we can see that all 48 districts in East Malaysia have exactly 6 links.\n\n### 7.2 LISA\n\n### 7.2.1 Computing Local Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(msia_total_crimes$ADM2_EN)\nlocalMI <- localmoran(msia_total_crimes$total_crimes, knn6_lw)\nhead(localMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            Ii          E.Ii       Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.037083313 -2.760985e-03 1.963267e-02  0.2843652      0.7761305\n2  0.022077090 -4.038567e-04 2.878511e-03  0.4190160      0.6752044\n3  0.000755672 -3.059263e-07 2.181387e-06  0.5118501      0.6087559\n4 -0.058333845 -1.283716e-03 9.141703e-03 -0.5966822      0.5507196\n5 -0.046361434 -1.581031e-03 1.125562e-02 -0.4220884      0.6729605\n6 -0.221639474 -9.445948e-02 6.099152e-01 -0.1628486      0.8706376\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=msia_total_crimes$ADM2_EN[fips]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nbau           -2.7246e-01 -2.5582e-03  1.8194e-02 -2.0010e+00         0.0454\nbeaufort       3.7083e-02 -2.7610e-03  1.9633e-02  2.8437e-01         0.7761\nbelaga        -1.5997e-02 -5.3574e-03  3.7996e-02 -5.4584e-02         0.9565\nbeluran        2.2077e-02 -4.0386e-04  2.8785e-03  4.1902e-01         0.6752\nbetong         1.4789e-01 -2.5582e-03  1.8194e-02  1.1154e+00         0.2647\nbintulu       -3.8866e-02 -3.3160e-03  2.3566e-02 -2.3158e-01         0.8169\ndalat          1.1819e-01 -6.4124e-03  4.5430e-02  5.8461e-01         0.5588\ndaro           1.2226e-01 -8.2617e-03  5.8423e-02  5.3998e-01         0.5892\njulau          8.6043e-02 -5.6492e-03  4.0053e-02  4.5816e-01         0.6468\nkanowit        1.0151e-01 -6.2559e-03  4.4328e-02  5.1186e-01         0.6088\nkapit          1.6389e-01 -4.6619e-03  3.3086e-02  9.2662e-01         0.3541\nkeningau       7.5567e-04 -3.0593e-07  2.1814e-06  5.1185e-01         0.6088\nkinabatangan  -5.8334e-02 -1.2837e-03  9.1417e-03 -5.9668e-01         0.5507\nkota belud    -4.6361e-02 -1.5810e-03  1.1256e-02 -4.2209e-01         0.6730\nkota kinabalu -2.2164e-01 -9.4459e-02  6.0992e-01 -1.6285e-01         0.8706\nkota marudu   -3.0061e-02 -1.8243e-03  1.2984e-02 -2.4780e-01         0.8043\nkuching       -1.1488e+00 -6.6699e-01  1.5838e+00 -3.8287e-01         0.7018\nkudat         -3.7580e-02 -2.4597e-03  1.7495e-02 -2.6552e-01         0.7906\nkunak         -1.1913e-01 -4.1402e-03  2.9399e-02 -6.7066e-01         0.5024\nlahad datu     2.7014e-02 -5.3680e-04  3.8256e-03  4.4544e-01         0.6560\nlawas          1.3462e-01 -4.1402e-03  2.9399e-02  8.0928e-01         0.4184\nlimbang        1.6251e-01 -4.7971e-03  3.4041e-02  9.0681e-01         0.3645\nlubok antu     1.9112e-01 -4.1402e-03  2.9399e-02  1.1388e+00         0.2548\nlundu         -3.1264e-01 -3.3018e-03  2.3466e-02 -2.0194e+00         0.0434\nmarudi        -9.5697e-04 -1.3551e-03  9.6497e-03  4.0534e-03         0.9968\nmatu           1.1176e-01 -8.2617e-03  5.8423e-02  4.9654e-01         0.6195\nmeradong       9.4401e-02 -3.7693e-03  2.6776e-02  5.9995e-01         0.5485\nmiri          -4.7316e-01 -5.2294e-02  3.5338e-01 -7.0798e-01         0.4790\nmukah          9.0316e-02 -3.4158e-03  2.4273e-02  6.0162e-01         0.5474\npapar          1.9145e-02 -1.7785e-04  1.2679e-03  5.4265e-01         0.5874\npenampang      5.6857e-02 -1.7516e-03  1.2468e-02  5.2489e-01         0.5997\nranau         -8.0554e-02 -2.8653e-03  2.0372e-02 -5.4430e-01         0.5862\nsamarahan      3.2757e-01 -5.5206e-03  3.9147e-02  1.6835e+00         0.0923\nsandakan      -1.7404e-02 -9.9733e-03  7.0405e-02 -2.8003e-02         0.9777\nsaratok        2.1459e-01 -5.3574e-03  3.7996e-02  1.1284e+00         0.2592\nsarikei        7.2759e-02 -3.4158e-03  2.4273e-02  4.8893e-01         0.6249\nsemporna       4.1985e-02 -1.6702e-03  1.1890e-02  4.0036e-01         0.6889\nserian        -2.7855e-02 -2.8587e-05  2.0383e-04 -1.9490e+00         0.0513\nsibu          -7.1929e-01 -3.6978e-02  2.5392e-01 -1.3541e+00         0.1757\nsimunjan      -3.8169e-01 -4.5286e-03  3.2144e-02 -2.1037e+00         0.0354\nsipitang       1.5227e-01 -5.7979e-03  4.1102e-02  7.7967e-01         0.4356\nsong           9.1833e-02 -5.6492e-03  4.0053e-02  4.8708e-01         0.6262\nsri aman       1.1517e-01 -1.4285e-03  1.0171e-02  1.1562e+00         0.2476\ntatau          1.8568e-01 -6.1013e-03  4.3240e-02  9.2231e-01         0.3564\ntawau          6.4647e-02 -1.6482e-02  1.1559e-01  2.3863e-01         0.8114\ntenom          8.8173e-02 -3.5317e-03  2.5094e-02  5.7891e-01         0.5626\ntuaran        -9.6729e-02 -2.9715e-03  2.1125e-02 -6.4507e-01         0.5189\nw.p. labuan    2.4793e-02 -1.0533e-04  7.5099e-04  9.0855e-01         0.3636\n```\n\n\n:::\n:::\n\n\n### 7.2.2 Mapping local Moran's I\n\n#### Append to local Moran's I dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_total_crimes.localMI <- cbind(msia_total_crimes,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n\n#### Visualising local Moran's I statistic values and p-values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalMI_statistic.map <- tm_shape(msia_total_crimes.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local Moran's I statistic\") +\n  tm_borders(alpha = 0.5) + \n  tm_layout(\n    main.title = \"local Moran's I statistic\",\n    main.title.size = 1,\n    main.title.position = \"center\")\n\nlocalMI_pvalues.map <- tm_shape(msia_total_crimes.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) + \n  tm_layout(\n    main.title = \"local Moran's I p-values\",\n    main.title.size = 1,\n    main.title.position = \"center\")\n\ntmap_arrange(localMI_statistic.map, localMI_pvalues.map, asp=1, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-59-1.png){width=1152}\n:::\n:::\n\n\nwrite to rds so that can be read in the ShinyApp file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(localMI_statistic.map, \"data/rds/localMI_statistic.map.rds\")\nwrite_rds(localMI_pvalues.map, \"data/rds/localMI_pvalues.map.rds\")\n```\n:::\n\n\n### 7.3 Creating LISA Cluster Map\n\n-   In the Shiny App, under Local Measures tab, the following screenshot depicts selection between Moran Scatterplot and Moran Scatterplot with Standardized variable\n\n![](images/clipboard-2091516722.png)\n\n### 7.3.1 Plotting Moran scatterplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnci <- moran.plot(msia_total_crimes$total_crimes, knn6_lw,                   \n                  labels=as.character(msia_total_crimes$ADM2_EN),\n                  xlab=\"Total Cases over all years\",                    \n                  ylab=\"Spatially Lag Total Cases over all years\")\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-61-1.png){width=672}\n:::\n:::\n\n\n### 7.3.2 Plotting Moran scatterplot with standardized variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmsia_total_crimes$Z.total_crimes<- scale(msia_total_crimes$total_crimes) %>% \n  as.vector \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnci2 <- moran.plot(msia_total_crimes$total_crimes, knn6_lw,                   \n                  labels=as.character(msia_total_crimes$ADM2_EN),\n                  xlab=\"z- Total Cases over all years\",                    \n                  ylab=\"Spatially Lag z- Total Cases over all years\")\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-63-1.png){width=672}\n:::\n:::\n\n\n### 7.3.3 LISA map classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nmsia_total_crimes$lag_total_crimes <- lag.listw(knn6_lw, msia_total_crimes$total_crimes)\n\nDV <- msia_total_crimes$lag_total_crimes - mean(msia_total_crimes$lag_total_crimes)    \nLM_I <- localMI[,1] - mean(localMI[,1])    \nsignif <- 0.05       \nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4     \nquadrant[localMI[,5]>signif] <- 0\n```\n:::\n\n\n### 7.3.4 **Plotting LISA map**\n\n-   In Shiny: LISA Map\n\n![](images/clipboard-573219080.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|fig-width: 12\n#|fig-height: 10\n\ntotal_crimes <- qtm(msia_total_crimes, \"total_crimes\")\n\n\nmsia_total_crimes.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(msia_total_crimes.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(total_crimes, LISAmap, \n             asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-65-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noutliers_hotspots <- msia_total_crimes.localMI %>%\n  filter(quadrant %in% c(1, 2, 3, 4)) %>%\n  mutate(cluster = case_when(\n    quadrant == 1 ~ \"Low-Low (Hotspot)\",\n    quadrant == 2 ~ \"Low-High (Outlier)\",\n    quadrant == 3 ~ \"High-Low (Outlier)\",\n    quadrant == 4 ~ \"High-High (Hotspot)\",\n    TRUE ~ \"Insignificant\"  # Just a fallback, should not occur\n  ))\n\n# Print the results\nprint(outliers_hotspots[, c(\"ADM1_EN\", \"quadrant\", \"cluster\")])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 337381.7 ymin: 108268.9 xmax: 514052.4 ymax: 227502.6\nProjected CRS: WGS 84 / UTM zone 49N\n   ADM1_EN quadrant            cluster                       geometry\n20 sarawak        2 Low-High (Outlier) MULTIPOLYGON (((406897.6 13...\n33 sarawak        2 Low-High (Outlier) MULTIPOLYGON (((387584.1 18...\n44 sarawak        2 Low-High (Outlier) MULTIPOLYGON (((474075.3 17...\n```\n\n\n:::\n:::\n\n\n### 7.4 Computing Gi Statistics (total cases over the years)\n\nNext, we need to perform Gi Statistics, for each fixed distance and adaptive distances. The computed Gi statistic will give us a representation of a Z-score. Greater [**local Gi**]{.underline} represent a greater intensity of **clustering** and the direction (positive or negative) indicates **high or low clusters.**\n\n### 7.4.1 Gi statistics for adaptive distance\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(msia_total_crimes$ADM2_EN) \ngi.adaptive <- localG(msia_total_crimes$total_crimes, knn6_lw) \nmsia_total_crimes.gi <- cbind(msia_total_crimes, as.matrix(gi.adaptive)) %>%   \n  rename(gstat_adaptive = as.matrix.gi.adaptive.)  \n\n# Find the threshold for hotspot areas (e.g., top 5% of Gi scores) \nthreshold <- quantile(msia_total_crimes.gi$gstat_adaptive, 0.95)    \nhotspots <- msia_total_crimes.gi %>%   \n  filter(gstat_adaptive >= threshold)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhotspots_province_gstatscore <- hotspots %>%   \n  select(ADM2_EN, gstat_adaptive) %>%   \n  arrange(desc(gstat_adaptive))   \n\nprint(hotspots_province_gstatscore)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 3 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 337381.7 ymin: 108268.9 xmax: 514052.4 ymax: 227502.6\nProjected CRS: WGS 84 / UTM zone 49N\n   ADM2_EN gstat_adaptive                       geometry\n1 simunjan       2.103660 MULTIPOLYGON (((474075.3 17...\n2    lundu       2.019375 MULTIPOLYGON (((387584.1 18...\n3      bau       2.000985 MULTIPOLYGON (((406897.6 13...\n```\n\n\n:::\n:::\n\n\n### 7.4.2 Plotting and Mapping Gi values with adaptive distance weights\n\n-   In Shiny: Gi Map\n\n![](images/clipboard-1323571806.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGimap <- tm_shape(msia_total_crimes.gi) +    \n  tm_fill(col = \"gstat_adaptive\",            \n          style = \"pretty\",            \n          palette=\"-RdBu\",            \n          title = \"local Gi\") +    \n  tm_borders(alpha = 0.5) +   \n  tm_shape(hotspots) +    \n  tm_text(\"ADM2_EN\", size = 0.7, col=\"blue\") +    \n  tm_layout(     \n    main.title = \"Gi map showing hotspots\",     \n    main.title.size = 1,     \n    main.title.position = \"center\",     \n    legend.show = TRUE,     \n    legend.text.size = 1,   # Reduce the text size     \n    frame = FALSE)     \n\nGimap \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](take-home_Ex03_files/figure-html/unnamed-chunk-69-1.png){width=1152}\n:::\n:::\n\n\n-   Similarly, what inference can we draw from the adaptive-based plot?\n\n    -   Two **hotspots** (red) are identified in East Malaysia, with both hotspots located around the central region. These hotspots comprise the provinces of **Simunjan, Lundu,** and **Bau**, with gstat_adaptive scores ranging from approximately 2.00 to 2.10. This suggests these provinces have higher case concentrations compared to their neighbors, indicating positive spatial clustering.\n",
    "supporting": [
      "take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}