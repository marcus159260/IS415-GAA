---
title: "In-class Exercise 12: Geographically Weighted Predictive Modelling"
author: "Marcus Jaeson Yeo"
date: "November 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 10, fig.height = 10)
```

### Importing Packages

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)
```

### Importing Data

```{r}
mdata <- read_rds("data/rds/mdata.rds")
```

### Preparing Data

1.  Data Sampling

    -   Calibrating predictive models are computational intensive, especially random forest method is used. For quick prototyping, a 10% sample will be selected at random from the data by using the code chunk below.

```{r}
set.seed(1234)
HDB_sample <- mdata %>%
  sample_n(1500)
```

2.  Checking of Overlapping points

-   Check for overlapping point features

```{r}
overlapping_points <- HDB_sample %>%
  mutate(overlap = lengths(st_equals(., .)) > 1)
summary(overlapping_points$overlap)
```

3.  Spatial Jitter

-   st_jitter of sf package to move

```{r}
HDB_sample <- HDB_sample %>%
  st_jitter(amount = 5)

#move by 5 meters
```

After performing jitter, run the check overlapping code, will remove all the overlap = true

![](images/clipboard-742930981.png){width="599"}

### Data Sampling

Entire data is split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.

-   training: 0.65

-   test: 0.35

```{r}
set.seed(1234)
resale_split <- initial_split(HDB_sample,
                              prop = 6.67/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)

```

### Multicollinearity check

In order to avoid multicollinearity. ggcorrmat() of ggstatsplot is used to plot a correlation matrix to check if there are paris of highly correlated independent variables.

```{r}
#| fig-width: 10
#| fig-height: 10
mdata_nogeo <- mdata %>%
  st_drop_geometry()
ggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])
```

### Building a non-spatial multiple linear regression

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
```

### Predictive Modelling with [gwr]{.underline}

-   Computing bw

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm + 
                            storey_order + remaining_lease_mths + 
                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + 
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          approach="CV",
                          kernel = "gaussian",
                          adaptive = TRUE,
                          longlat = FALSE)

gwr_bw_train_ad
```

We see that the **bw** value is 19. But in gwr_ad, we round it to 20.

-   Model calibration

```{r}
gwr_ad <- gwr.basic(formula = resale_price ~ floor_area_sqm + 
                            storey_order + remaining_lease_mths + 
                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + 
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          bw= 20,
                          kernel = "gaussian",
                          adaptive = TRUE,
                          longlat = FALSE)
```

-   Model Output

```{r}

```

-   Predicting with test data

```{r}
gwr_pred <- gwr.predict(formula = resale_price ~ floor_area_sqm + 
                            storey_order + remaining_lease_mths + 
                            PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + 
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          predictdata = test_data,
                          bw= 20,
                          kernel = "gaussian",
                          adaptive = TRUE,
                          longlat = FALSE)
```

-   Saving predicted values

```{r}
gwr_pred_df <- as.data.frame(
  gwr_pred$SDF$prediction) %>%
  rename(gwr_pred = "gwr_pred$SDF$prediction")

```

### Predictive Modelling with RF method

-   Data Preparation

```{r}
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)
```

```{r}
train_data_nogeom <- train_data %>%
  st_drop_geometry()
```

-   Calibrating RF model

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + 
                  storey_order + remaining_lease_mths + 
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + 
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                  WITHIN_1KM_PRISCH,
                  data=train_data_nogeom)
```

-   Model Output

-   Preparing the test data

```{r}
test_data_nogeom <- cbind(
  test_data, coords_test) %>%
  st_drop_geometry()
```

-   Predicting with rf

```{r}
#pred the rf model using test_data_nogeom data

rf_pred <- predict(rf, 
                   data = test_data_nogeom)
```

-   Saving the predicted values

    -   The output of predict() of ranger is object of class ranger with elements. Code chunk is used to extract values from predictions of predicted classes and save the values in a data frame called rf_pred_df.

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>%
  rename(rf_pred = "rf_pred$predictions")
```

### Predictive Modelling with SpatialML

-   Calibrating with grf

```{r}
set.seed(1234)
grf_ad <- grf(formula = resale_price ~ floor_area_sqm + 
                  storey_order + remaining_lease_mths + 
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + 
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                  WITHIN_1KM_PRISCH,
                  dframe=train_data_nogeom,
                  bw=20,
                  kernel = "adaptive",
                  coords=coords_train)

```

-    Predicting with the test data

```{r}

grf_pred <- predict.grf(grf_ad,
                        test_data_nogeom,
                        x.var.name="X",
                        y.var.name = "Y",
                        local.w = 1,
                        global.w=8)
```

-   Save the predicted values

```{r}
grf_pred_df <- as.data.frame(grf_pred)
```

### Model Comparison

-   Combining model's output

```{r}
test_data_pred <- test_data %>%
  select(resale_price) %>%
  cbind(gwr_pred_df) %>%
  cbind(rf_pred_df) %>%
  cbind(grf_pred_df)
```

-   Transposing data

    -   in test_data_pred,

        -   drop geometry column first

        -   those columns ending with \_pred, will combine all 3 columns to one column (called model) and its values to another column (called predicted), from 500 rows -\> 1500 rows.

```{r}
test_longer <- test_data_pred %>%
  st_drop_geometry() %>%
  pivot_longer(cols = ends_with("pred"),
               names_to = "model",
               values_to = "predicted")
```

-   Renaming

```{r}
model_labels <- c(
  gwr_pred = "gwr",
  rf_pred = "Random Forest",
  grf_pred = "gwRF")

test_longer <- test_longer %>%
  mutate(model = recode(model, !!!model_labels))
```

-   Computing RMSE

```{r}
rmse_results <- test_longer %>%
  group_by(model) %>%
  rmse(truth = resale_price, 
       estimate = predicted) %>%
  rename(rmse = .estimate) %>%
  select(model, rmse)
```

### Model Comparison Plots

-   Bar chart

```{r}
ggplot(rmse_results,
       aes(x = reorder(model, rmse),
           y=rmse,
           fill = "skyblue")) + 
  geom_bar(stat = "identity", 
           fill = "skyblue",
           color = "black",
           width = 0.7) + 
  labs(title = "RMSE Comparison of Model",
       y = "RMSE",
       x = "Model") + 
  theme_minimal()
```

-   Scatter Plots

```{r}
test_longer <- test_longer %>%
  left_join(rmse_results,
            by = "model")

ggplot(data = test_longer,
       aes(x = predicted,
           y = resale_price)) + 
  facet_wrap(~ model) + 
  geom_point() + 
  geom_text(data = test_longer,
            aes(x = Inf, y = Inf,
                label = paste("RMSE: ", round(rmse,2))),
            hjust = 1.1, vjust = 1.1,
            color = "black", size = 4)
```

### Variable Importance

```{r}
var_imp <- data.frame(
  Variable = names(grf_ad$Global.Model$variable.importance),
  Importance = grf_ad$Global.Model$variable.importance
)

```

-   Plotting

```{r}
ggplot(var_imp, aes(x = reorder(Variable, 
                                Importance),
                    y = Importance)) + 
  geom_bar(stat = "identity",
           fill = "skyblue") +
  coord_flip() + 
  labs(
    title = "Variable Importance from Ranger Model",
    x = "Variables",
    y = "Importance"
  )
  theme_minimal()
```
