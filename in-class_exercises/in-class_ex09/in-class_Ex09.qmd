---
title: "In-Class-Exercise 09"
author: "Marcus Jaeson Yeo"
date: "October 21, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
---

## **1.0 Introduction**

## **2.0 Importing Packages**

```{r}
pacman::p_load(spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

## **3.0 Importing Datasets into Environment**

-   geospatial, aspatial, cluster

    -   ict -\> input clustering variable

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
shan_ict <- read_rds("data/rds/shan_ict.rds")
shan_sf_cluster <- read_rds("data/rds/shan_sf_cluster.rds")
```

## **4.0 Data Wrangling**

#### [Hierarchical Clustering]{.underline}

-   proxmat -\> proximity matrix

-   minimum clusters to use should be at least 3, hence we use k=6

```{r}
proxmat <- dist(shan_ict, method='euclidean')
hclust_ward <- hclust(proxmat, method='ward.D')
groups <- as.factor(cutree(hclust_ward, k=6))

```

```{r}
class(hclust_ward)

```

#### Append to the geospatial data

-   cbind -\> append, different from left_join (left_join performs joining based on common identifier) but cbind does not do so on common identifier

    -   column binding (column bind function is used for merging two data frames, given that the number of rows in both the data frames are equal.)

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename('CLUSTER' = 'as.matrix.groups.') %>%
  select(-c(3:4, 7:9)) %>%
  rename(TS = TS.x)
```

#### Dendogram

```{r}
#|fig-width: 7
#|fig-height: 12
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k=6, border = 2:5)

```

#### Cluster Map

-   tmap

    -   qtm (quick tmap)

    -   tm_shape, tm_fill, etc

```{r}

qtm(shan_sf_cluster, "CLUSTER")
```

## **5.0 Exploratory Spatial Data Analysis**

#### Spatially Constrained Clustering

-   SKATER

-   REDCAP

-   ClustGeo

#### SKATER

-   SKATER is a hard classification method

<!-- -->

-   concepts:

    -   create geographical graphs based on their coordinates

    -   dissimilarity -\> actual coordinate distance

    -   take polygon -\> take centroid and conduct distance dissimilarity (actual distance matrix)

<!-- -->

-   st_distance used to compute the distance matrix

-   distmat -\> convert distance matrix (origins and destinations)

```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

step 1: computing nearest neighbours

```{r}
shan.nb <- poly2nb(shan_sf) 
summary(shan.nb)
```

step 2: visualising neighbours

```{r}
plot(st_geometry(shan_sf), border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, 
     pts, 
     col="blue",
     add=TRUE)
```

step 3: computing minimum spanning tree

-   calculating edge costs

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

-   incorporating these costs into a weights object

```{r}
shan.w <- nb2listw(shan.nb,
                   lcosts,
                   style="B")

summary(shan.w)
```

-   computing MST

```{r}
shan.mst <- mstree(shan.w)
```

-   visualising MST

```{r}
plot(st_geometry(shan_sf),
     border=gray(.5))
plot.mst(shan.mst, 
         pts,
         col="blue",
         cex.lab=0.7,
         cex.circles=0.005,
         add=TRUE)
```

step 4: plotting the skater tree

```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2],
                        data = shan_ict,
                        method = 'euclidean',
                        ncuts = 5)
```

-   border=gray(0(opaque) -\> 1(transparent))

```{r}
#|fig-width: 12
#|fig-height: 10
plot(st_geometry(shan_sf),
     border=gray(.5))
plot(skater.clust6,
     pts,
     cex.lab=.7,
     groups.colors=c("red", "green", "blue", "brown", "pink"),
     cex.circles = 0.005,
     add = TRUE)
```

step 5: visualising clusters in chloropleth map

-   as.factor -\> instead of categorical, will automatically give you as ordinal (numerical) and sort by ascending (either numerical: 1,2,3, or categorical: a,b,c)

```{r}
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename('skater_CLUSTER' = 'as.factor.groups_mat.')

qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

#### [ClustGeo Method]{.underline}

-   unsupervised learning method

-   soft classification method -\> how many proportion of the attribute and spatial you want to use

-   look for -\> the point where D0 and D1 are the closest

step 1: compute distance matrix (centroid)

-   st_distance used to compute the distance matrix

-   distmat -\> convert distance matrix (origins and destinations)

```{r}
dist <- st_distance(shan_sf, shan_sf) 
distmat <- as.dist(dist)
```

step 2:

-   0.1 -\> interval/break

```{r}
cr <-choicealpha(proxmat, distmat,
                 range.alpha= seq(0, 1, 0.1),
                 K=6, graph = TRUE)
```

-   saving the clustGeo output

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clustG, k=6))
shan_sf_clustGeo <- cbind(shan_sf, 
                          as.matrix(groups)) %>%
  rename('clustGeo' = 'as.matrix.groups.')
```

step 3: visualising the clustGeo map

```{r}
qtm(shan_sf_clustGeo, "clustGeo")
```

step 4: characterising the clusters

```{r}
ggparcoord(data = shan_sf_clustGeo,
           columns = c(17:21),
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") + 
  facet_grid(~ clustGeo) +
  theme(axis.text.x = element_text(angle = 30))
```
